FORMAT: 1A
HOST: https://panel-id.pdk.io/api

# PDK Panel API

The PDK Panel API provides for programmatic access to CRUD operations on entities and a realtime event stream from the PDK Access Control system.

The API conforms to many of the tenets of the REST style architecture and fully embraces the HTTP standard to fulfill many of these.

* Stateless
* Cacheable
* A URL identifies a Resource
* Operations conveyed implicitly through HTTP verbs

This drives certain uniform architectural attributes of the API.

# Authentication

Authenticating to this stateless API is handled by including an HTTP Authentication header in each request.
Before making any requests to the panel's API andpoint you will need a Bearer token.
This token represents your application's permission to access the API as delegated by the user.

For instructions on retrieving a token for communicating with a panel's API, see the [Auth Server API documentation](http://docs.pdkauthapi.apiary.io/). There are quite many libaries that support OpenID Connect protocol which is used for authentication. Please check [this link](https://openid.net/developers/libraries/) to see the list with some of them.

Because the API is stateless, this Bearer token must be included in every request to the API.
The Authorization header MUST be of the following format:

`Authorization: Bearer {token-value}`


# Resource Operations

Standard CRUD operations on resources are performed using HTTP verbs.

* GET - Retrieve a resource, never modifies data.
* POST - Create a resource. All required fields must be specified. In case when one of optional parameters is not specified, it's default value will be used.
* PUT - Update a resource. Requires whole resource body to be specified.
* DELETE - Delete a resource.


# Cache Headers

The current state of a resource is identified by standard HTTP caching mechanisms in the response to a requested resource (e.g. ETag, Last-Modified, cache-control).
These headers can be used for change detection and intermediate caching.

Most HTTP stacks (including your browser address bar) automatically deal with caching headers in a bandwidth, proxy, and user-friendly way.


# URI Format

Resource URIs will generally follow a format similar to those shown below.

* Resource Collection - `https://panel-id.pdk.io/api/{resource-name}`
Example - `https://panel-id.pdk.io/api/persons`
* Specific Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}`
Example - `https://panel-id.pdk.io/api/persons/1`
* Related Resource Collection - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}`
Example - `https://panel-id.pdk.io/api/persons/1/groups`
* Specific Related Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}/{id}`
Example - `https://panel-id.pdk.io/api/persons/1/groups/2`


# Pagination

Most of calls that return collections return paginated results in order to decrease panel server load 
(see `page` and `per_page` url query parameters).
Response contains link headers with links to first, last, next and prevous pages of results, 
which are specified in `first`, `last`, `next` and `prev` links accordingly.

For example, calling `GET https://panel-id.pdk.io/api/persons?page=1&per_page=5` will lead for the following headers:

<code>
Link: \<https://panel-id.pdk.io/api/peoples?per_page=5>; rel="first",<br>
    \<https://panel-id.pdk.io/api/peoples?per_page=5>; rel="prev",<br>
    \<https://panel-id.pdk.io/api/peoples?page=2&per_page=5>; rel="next",<br>
    \<https://accounts.pdk.io/api/search?page=2&per_page=5>; rel="last"<br>
X-Total-Count: 11
</code>

# Content type

Content type is set to `application/json` for all API calls.


# Response Codes

## HTTP Codes
* `200` - OK status with JSON body
* `204` - OK status without body
* `400` - Bad Request
* `401` - Unauthorized
* `403` - Forbidden
* `404` - Not Found
* `422` - Unprocessable Entity
* `500` - Internal Server Error

## Error message format

Error messages provide human-readable description. For now only English language is supported, localization support will come in next releases.

    {
        "message" : "Human-friendly error message",
        "errors": {
            "field": "Human-friendly error message related to certain field (optional)"
        }
    }


# Roles
Roles permissions have hierarchical structure. List of possible roles given below:
* `Reporter` has read only access for Persons, Groups entities.
* `Manager` in addition to `Reporter` permissions has write access for Persons and Groups entities.
* `Admin` in addition to `Manager` permissions has write access for Persons, Groups, System Events, Auto Open Rules, Floor Groups entities.
* `Integrator` in addition to `Admin` permissions can change hardware configuration (Devices, Connections, Config and Websocket API commands).
* `Sysop` in addition to `Admin` permissions can change hardware configuration (Devices, Connections, Config and Websocket API commands).


# Group Search

The functionality is available for all roles.

### Global Search [GET /search?page={page}&per_page={per_page}&sort={sort_order}&q={query_string}]
+ Parameters

    + q (optional, string) ... Url-encoded query string. Search will be done in the following entities: Person (`firstName`, `lastName` and `cardNumber`), Group (`name`), Floor Group (`name`). Minimum length is `1` character, maximum length is `70` characters.
    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Entities are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of entity.
    + `type` (required, enum[string]) ... Type of entity.
        + Members
            + `person`
            + `group`
            + `floorGroup`
    + `name` (required, string) ... Entity name.
    + `description` (required, string) ... Entity description (will be equal to person's card number in case of search by card number).
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/search?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/search?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "type": "person",
                    "name": "Ted Froëdington",
                    "description": "654321123456"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

# Group Persons
A person entity represents the attributes of a person that will be interacting with the access control system.
These attributes include the person's first and last names, a list of their credentials, rules that apply to them, and a list of group memberships, among others. 

## Persons Collection [/persons?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.
        
### Retrieve all Persons [GET /persons?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Persons are sorted by `lastName`, `firstName` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Person's id.
    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `photoUrl` (optional, string) ... Person's account photo URL.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/persons?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "firstName": "Ted",
                    "lastName": "Froëdington",
                    "photoUrl": "http://example.com/usersImages/32224.jpg"
                }
            ]
+ Response 401 (application/json)

## Person [/persons/{person_id}]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving a Person is also available for the [Reporter] role.

+ Model

    + `firstName` (required, string) ...  Person's first name. Minimum length is `1` character, maximum length is `35` characters.
    + `lastName` (required, string) ...  Person's last name. Minimum length is `1` character, maximum length is `35` characters.
    + `photoUrl` (optional, string) ... Person's account photo URL.
    
    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "firstName": "Ted",
                "lastName": "Froëdington",
                "photoUrl": "http://example.com/usersImages/32224.jpg"
            }

### Retrieve a Person [GET]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `photoUrl` (optional, string) ... Person's account photo URL.
    
    + Body
    
            {
                "id": 1,
                "firstName": "Ted",
                "lastName": "Froëdington",
                "photoUrl": "http://example.com/usersImages/32224.jpg"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Person [POST /persons]

+ Request (application/json)

    [Person][]
            
+ Response 200 (application/json)

    + `id` (required, number) ... Id of created entity.
    
    + Body
    
            {
                "id": 1
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)

### Update a Person [PUT]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    + `firstName` (required, string) ...  Person's first name. Minimum length is `1` character, maximum length is `35` characters.
    + `lastName` (required, string) ...  Person's last name. Minimum length is `1` character, maximum length is `35` characters.
    + `photoUrl` (required, string) ... Person's account photo URL.
    
    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "firstName": "Ted",
                "lastName": "Froëdington",
                "photoUrl": "http://example.com/usersImages/32224.jpg"
            }
            
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)

### Delete a Person [DELETE]
Person removal leads to all Person's Rules removal.

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Cards [/persons/{person_id}/cards]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles.  Retrieving Cards is also available for the [Reporter] role.

+ Model

    + `cardNumber` (required, number) ... Card number. Must be unique among all persons. Maximum value is 99999999999.
    + `description` (optional, string) ... Card description. Minimum length is `1` character, maximum length is `255` characters.
    
    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "cardNumber": 123,
                "description": "Card description"
            }


### Retrieve all Cards [GET /persons/{person_id}/cards?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + person_id (required, number) 
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Cards are sorted by `cardNumber` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of the Card.
    + `cardNumber` (required, number) ... Card number.
    + `description` (optional, string) ... Card description.  Maximum length is `255` characters.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/cards?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/cards?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 1,
                    "cardNumber": 12321,
                    "description": "myCard"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Retrieve a Card [GET /persons/{person_id}/cards/{card_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of the Card.
    + `cardNumber` (required, number) ... Card number.
    + `description` (optional, string) ... Card description. Maximum length is `255` characters.
    
    + Body
    
            {
                "id": 1,
                "cardNumber": 123,
                "description": "Card description"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Card [POST]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Cards][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Card [DELETE /persons/{person_id}/card/{card_id}]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Rules Collection [/persons/{person_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]

#### List of access rules, event rules and elevator rules that apply to this Person.

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.

### Retrieve Rules Collection for a Person [GET]
+ Parameters

    + person_id (required, number)
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, number) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                + `forceToggle`
                + `forceOpen`
                + `forceClose`
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, string) ... Template for email.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
        
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/231/rules?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/persons/231/rules?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1,
                            "name": "Floor Group 1",
                            "floors": [
                                {
                                    "id": 1,
                                    "name": "Door 1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "whenAllowed",
                    "action": "delayOpen",
                    "emailTemplate": "testTemplate",
                    "delay": "0:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "selected",
                    "targetDoors": [
                        {
                            "id": 2,
                            "name": "Door 2"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

## Person Rules  [/persons/{person_id}/rules]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving a Rule is also available for the [Reporter] role.

+ Model

    + Common parameters for all rule types
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array[number]) ... Door `id`s on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array[number]) ... Floor Group `id`s on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name. Minimum length is `1` character, maximum length is `70` characters.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                + `forceToggle`
                + `forceOpen`
                + `forceClose`
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, string) ... Template for email.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array[number]) ... Door `id`s considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array[number]) ... Door `id`s on which action should be performed. Must be provided when `target`=`selected`.
        
    + Headers
    
            Authorization: Bearer {token}    
            
    + Body
    
            {
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [ 1, 3 ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "doors": [ 132, 133 ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "delay": "0:25:43",
                "emailTemplate": "testTemplate",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [ 1, 3 ],
                "target": "source"
            }

### Retrieve a Rule for a Person  [GET /persons/{person_id}/rules/{rule_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, number) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                + `forceToggle`
                + `forceOpen`
                + `forceClose`
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, string) ... Template for email.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
            
    + Body
    
            {
                "id": 1,
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [
                    {
                        "id": 1,
                        "name": "Floor Group 1",
                        "floors": [
                            {
                                "id": 1,
                                "name": "Door 1"
                            }
                        ]
                    }
                ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132,
                        "name": "Door 1"
                    }
                ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "delay": "0:25:43",
                "emailTemplate": "testTemplate",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Rule for a Person  [POST /persons/{person_id}/rules]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Rule for a Person [PUT /persons/{person_id}/rules/{rule_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Rule for a Person [DELETE /persons/{person_id}/rules/{rule_id}]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Groups [/persons/{person_id}/groups]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. [Reporter] role has access for retrieving operations only.

### Retrieve all Groups for a Person [GET /persons/{person_id}/groups?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + person_id (required, number)
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/32/groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/persons/32/groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11

    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

### Retrieve a Group for a Person  [GET /persons/{person_id}/groups/{group_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + group_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
            
+ Response 200 (application/json)

    + Body
    
            {
                "id": 1,
                "name": "group1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

### Create a Group for a Person [POST /persons/{person_id}/groups]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
        
            {
                "id": 1
            }
            
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

### Remove a Person from a Group [DELETE /persons/{person_id}/groups/{group_id}]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)   

# Group Images

Service that accepts images in base64 fromat and returns relative path to it.

## Image Uploading [/image]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles.  

### Upload an image [POST]

+ Request (application/json)

    + `base64` (required, string) ... Value in base64 format.

    + Headers
    
            Authorization: Bearer {token}
            
    + Body
    
            {
                "base64": "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24="
            }

+ Response 200 (application/json)

    + `imageUrl` (required, string) ... URL to the uploaded image.
    
    + Body
    
            {
                "imageUrl": "http://example.com/usersImages/32224.jpg"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

# Group Groups

A group entity represents a set of shared rules that apply to people that are members of the group.

## Groups Collection [/groups?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.

### Retrieve All Groups [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
            
    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

## Group [/groups/{group_id}]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving a Group is also available for the [Reporter] role.

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.

+ Model 

    + `name` (required, string) ... Group name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    
    + Headers
    
            Authorization: Bearer {token}
            
    + Body
    
            {
                "name": "group1"
            }

### Retrieve a Group [GET]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `name` (required, string) ...  Group name.

    + Body
    
            {
                "id": 1,
                "name": "group1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Group [POST /groups]

+ Request (application/json)

    [Group][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 422 (application/json)


### Update a Group [PUT]

+ Request (application/json)

    [Group][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)


### Delete a Group [DELETE]

+ Request
Group removal leads to all Group's Rules removal.

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Group Rules Collection [/groups/{group_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]

#### List of access rules, event rules and elevator rules that apply to this Group.

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.

### Retrieve Rules Collection for a Group [GET]
+ Parameters

    + group_id (required, number)
        Numeric `id` of the Group to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, string) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                + `forceToggle`
                + `forceOpen`
                + `forceClose`
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, string) ... Template for email.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups/43/rules?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/groups/43/rules?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1,
                            "name": "Floor Group 1",
                            "floors": [
                                {
                                    "id": 1,
                                    "name": "Door 1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "whenAllowed",
                    "action": "delayOpen",
                    "emailTemplate": "",
                    "delay": "0:25:43",
                    "emailTemplate": "testTemplate",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "source"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

## Group Rules [/groups/{group_id}/rules]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving a Rule is also available for the [Reporter] role.

### Retrieve a Rule for a Group  [GET /groups/{group_id}/rules/{rule_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, string) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                + `forceToggle`
                + `forceOpen`
                + `forceClose`
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, string) ... Template for email.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Body
    
            {
                "id": 1,
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [
                    {
                        "id": 1,
                        "name": "Floor Group 1",
                        "floors": [
                            {
                                "id": 1,
                                "name": "Door 1"
                            }
                        ]
                    }
                ]
            }
            
            {
                "id": 1,
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132,
                        "name": "Front Door"
                    }
                ]
            }
            
            {
                "id": 1,
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "emailTemplate": "",
                "delay": "0:25:43",
                "emailTemplate": "testTemplate",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Rule for a Group  [POST /groups/{group_id}/rules]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Rule for a Group [PUT /groups/{group_id}/rules/{rule_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Rule for a Group [DELETE /groups/{group_id}/rules/{rule_id}]
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Group Persons [/groups/{group_id}/persons]

The functionality is available for [Sysop, Integrator, Admin, Manager, Reported] roles.

### Retrieve all Persons [GET /groups/{group_id}/persons?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Persons are sorted by `lastName`, `firstName` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Person's id.
    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `photoUrl` (optional, string) ... Person's account photo URL.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups/12/persons?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/groups/12/persons?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "firstName": "Ted",
                    "lastName": "Froëdington",
                    "photoUrl": "http://example.com/usersImages/32224.jpg"
                }
            ]
+ Response 401 (application/json)

# Group System Events

#### List of event rules that apply to system-wide events, which are events not generated by a single person or group.

## System Events Rules Collection [/system_events?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin] roles.

### Retrieve System Events Collection [GET]
+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id`  (required, number) .. Numeric event `id`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
            + `forceToggle`
            + `forceOpen`
            + `forceClose`
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
    + `emailTemplate` (optional, string) ... Template for email. Used with `sendEmail` action type only.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/system_events?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/system_events?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "onDoorClose",
                    "action": "delayOpen",
                    "delay": "0:25:43",
                    "emailTemplate": "testTemplate",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "selected",
                    "targetDoors": [
                        {
                            "id": 2,
                            "name": "Door 2"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

## System Events Rules [/system_events]

The functionality is available for [Sysop, Integrator, Admin] roles.

+ Model

    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + `name` (required, string) ... Rule name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
            + `forceToggle`
            + `forceOpen`
            + `forceClose`
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
    + `emailTemplate` (optional, string) ... Template for email. Used with `sendEmail` action type only.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array[number]) ... Door `id`s considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array[number]) ... Door `id`s on which action should be performed. Must be provided when `target`=`selected`.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "name": "MyEventRule",
                "triggerType": "onDoorClose",
                "action": "delayOpen",
                "delay": "0:25:43",
                "emailTemplate": "testTemplate",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [ 1, 3 ],
                "target": "selected",
                "targetDoors": [ 2, 3 ]
            }

### Retrieve a System Event Rule [GET /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id`  (required, number) .. Numeric event `id`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
            + `forceToggle`
            + `forceOpen`
            + `forceClose`
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
    + `emailTemplate` (optional, string) ... Template for email. Used with `sendEmail` action type only.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
    
    + Body
    
            {
                "id": 1,
                "name": "MyEventRule",
                "triggerType": "onDoorClose",
                "action": "delayOpen",
                "emailTemplate": "testTemplate",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

### Create a System Event Rule  [POST /system_events]

+ Request (application/json)

    [System Events Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created event rule.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a System Event Rule [PUT /system_events/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [System Events Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a System Event Rule [DELETE /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Auto Open

#### List of access rules that represent the times that doors should be propped open.

## Auto Open Rules Collection [/auto_open?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin] roles.

### Retrieve Auto Open Rules Collection [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of a rule.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/auto_open?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/auto_open?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
            
    + Body
    
            [
                {
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                }
            ]
            
+ Response 400 (application/json)
+ Response 401 (application/json)

## Auto Open Rules [/auto_open]

The functionality is available for [Sysop, Integrator, Admin] roles.

+ Model

    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array[number]) ... Door `id`s on which rule should be performed.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "doors": [ 132, 133 ]
            }
            
### Retrieve an Auto Open Rule [GET /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Auto Open Rule to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of a rule.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.
            
    + Body
    
            {
                "id": 1,
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 1,
                        "name": "Front Door"
                    }
                ]
            }

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 404 (application/json)

### Create an Auto Open Rule  [POST]

+ Request (application/json)

    [Auto Open Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created rule.

    + Body
    
            {
                "id": "1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update an Auto Open Rule [PUT /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Auto Open Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete an Auto Open Rule [DELETE /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Floor Groups

#### Associates a reader input and a group of floor outputs. This group is then referenced from an elevator rule on a person or group to activate all the floor buttons in the elevator car where input reader is installed.

## Floor Groups Collection [/floor_groups?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin] roles.

### Retrieve all Floor Groups [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Floor groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric group `id`.
    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, number) ... Reader device `id`.
    + `readerPortName` (required, string) ... Reader device `name`.
    + `floors` (required, array) ... List of doors in current Floor Group.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/floor_groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/floor_groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "id": 1,
                    "name": "Public Floors",
                    "readerPort": 1,
                    "readerPortName": "Reader 1",
                    "floors": [
                        {
                            "id": 1,
                            "name": "Floor 1"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Floor Groups [/floor_groups]

The functionality is available for [Sysop, Integrator, Admin] roles.

+ Model

    + `name` (required, string) ... Floor Group name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array[number]) ... Doors `id`s which belong to this Floor Group.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "name": "Public Floors",
                "readerPort": 1,
                "floors": [ 1, 3 ]
            }


### Retrieve a Floor Group [GET /floor_groups/{group_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric group `id`.
    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, number) ... Reader device `id`.
    + `readerPortName` (required, string) ... Reader device `name`.
    + `floors` (required, array) ... List of doors in current Floor Group.
        
    + Body
    
            {
                "id": 1,
                "name": "Public Floors",
                "readerPort": 1,
                "readerPortName": "Reader 1",
                "floors": [
                    {
                        "id": 1,
                        "name": "Floor 1"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Floor Group  [POST]

+ Request (application/json)

    [Floor Groups][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Floor Group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Floor Group [PUT /floor_groups/{group_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.

+ Request (application/json)

    [Floor Groups][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Floor Group [DELETE /floor_groups/{group_id}]
Floor Group removal leads to Elevator Rules removal when the specified Floor Group is the only one used in correspond Rule.
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Devices

#### A device entity represents the attributes of a board port that is connected with end devices which represent a physical object (door, a reader in an elevator car, etc.). These attributes include the device's name, a connection properties (port number, wireless address) and list of enabled features.

The functionality is available for [Sysop, Integrator] roles.

### Retrieve Devices Collection [GET /devices?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Devices are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Device id.
    + `name` (required, string) ...  Device name.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set).
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/devices?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/devices?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Devices [/devices]

The functionality is available for [Sysop, Integrator] roles.

+ Model

    + `name` (required, string) ...  Device name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating. It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated. It is an integer in `0`...`9999` range including borders.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set). It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
            }

### Retrieve a Device [GET /devices/{device_id}]

+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Device id.
    + `name` (required, string) ...  Device name.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set).
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
        
    + Body
    
            {
                    "id": 10,
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Device [POST]

+ Request (application/json)

    [Devices][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Device.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Device [PUT /devices/{device_id}]

+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.

+ Request (application/json)

    + `name` (required, string) ...  Device name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device.
    + `delay` (required, number)
        Amount of time (in tenths of second) that the relay should delay before actuating.
    + `dwell` (required, number)
        Amount of time (in tenths of second) that the relay should stay actuated.
    + `dps` (required, boolean)
        Enables Door Position Sense (DPS) feature for this door.
    + `propAlarm` (required, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
    + `propDelay` (required, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set).
    + `rex` (required, boolean)
        Enables Request to Exit (REX) feature for this door.
    + `forcedAlarm` (required, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
    + `autoOpenAfterFirstAllow` (required, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Device [DELETE /devices/{device_id}]
Device removal leads to Floor Groups and Rules removal when the specified Device is the only one used in correspond Floor Group or Rule.
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Connections

#### A connection entity represents the attributes of a connection with board(s) via concrete trasport. These attributes include the connection's name and connection properties (e.g. serial port number in case of USB connected board).

The functionality is available for [Sysop, Integrator] roles.

### Retrieve Connections Collection [GET /connections?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Connections are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Connection id.
    + `name` (required, string) ...  Connection name.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `connected` (optional, boolean) ... Connection status.
    + `address` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection and wireless address of coordinator in case of Wireless connection. Will be empty in case of USB connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of USB connection.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/connections?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/api/connections?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "name": "Board 1",
                    "type": "ethernet",
                    "address": "192.168.1.1",
                    "port": 10001
                },
                {
                    "id": 11,
                    "name": "Board 2",
                    "type": "wirelessCoordinator",
                    "address": "13A200403E08DD",
                    "port": 7
                },
                {
                    "id": 12,
                    "name": "Board 3",
                    "type": "usb",
                    "port": 3
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Connections [/connections]

The functionality is available for [Sysop, Integrator] roles.

+ Model

    + `name` (required, string) ...  Connection name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `address` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection. Must be empty in case of Wireless or USB connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of Wireless or USB connection. It is an integer in `0`...`65535` range including borders for Ethernet connections and an integer in `0`...`31` range including borders for other types.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Board 1",
                    "type": "ethernet",
                    "address": "192.168.1.1",
                    "port": 10001
            }

### Retrieve a Connection [GET /connections/{connection_id}]

+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Connection id.
    + `name` (required, string) ...  Connection name.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `address` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection or wireless address of coordinator in case of Wireless connection. Will be empty in case of USB connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of Wireless or USB connection.
        
    + Body
    
            {
                    "id": 12,
                    "name": "Board 3",
                    "type": "usb",
                    "port": 3
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Connection [POST]

+ Request (application/json)

    [Connections][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Connection.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Connection [PUT /connections/{connection_id}]

+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.

+ Request (application/json)

    [Connections][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Connection [DELETE /connections/{connection_id}]
Removal of a Connection used by any Devices is forbidden.
+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Config

#### A config entity represents system configuration entries.

The functionality is available for [Sysop, Integrator] roles.

## Config [/config]

The functionality is available for [Sysop, Integrator] roles.

+ Model

    + `logPurgeDays` (required, number)
        Number of days to retain access log entries.
        + Default: `90`
    + `cardFormat` (optional, enum[string])
        Card format that is used by readers in the system.
        + Members
            + `24bitCardIds`
            + `26bitStandard`
            + `40bitFips`
            + `combo40bitFips26bitStandard`
        + Default: `26bitStandard`
    + `ecards` (optional, array[number]) ... An array of 10 numbers that represent Ecards
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "logPurgeDays": 90,
                    "cardFormat": "26bitStandard",
                    "connection": [99, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            }

### Retrieve Config [GET /config]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `logPurgeDays` (required, number)
        Number of days to retain access log entries.
    + `cardFormat` (required, enum[string])
        Card format that is used by readers in the system.
        + Members
            + `24bitCardIds`
            + `26bitStandard`
            + `40bitFips`
            + `combo40bitFips26bitStandard`
    + `ecards` (optional, array[number]) ... An array of 10 numbers that represent Ecards
        
    + Body
    
            {
                    "logPurgeDays": 90,
                    "cardFormat": "24bit_card_ids",
                    "connection": [99, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            }

+ Response 401 (application/json)
+ Response 403 (application/json)

### Update Config [PUT /config]

+ Request (application/json)

    [Config][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

# Group Websocket API

## TODO Here will be websocket commands description