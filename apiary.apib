FORMAT: 1A
HOST: https://{panel-name}.pdk.io/api/v1

# PDK Panel API
The PDK Panel API provides for programmatic access to CRUD operations on entities and a realtime event stream from the PDK Access Control system.

The API conforms to many of the tenets of the REST style architecture and fully embraces the HTTP standard to fulfill many of these.

* Stateless
* Cacheable
* A URL identifies a Resource
* Operations conveyed implicitly through HTTP verbs

This drives certain uniform architectural attributes of the API.

#Authentication

Authenticating to this stateless API is handled by including an HTTP Authentication header in each request.
Before making any requests to the panel's API andpoint you will need a Bearer token.
This token represents your application's permission to access the API as delegated by the user.

For instructions on retrieving a token for communicating with a panel's API, see the [Auth Server API documentation](http://docs.pdkauthapi.apiary.io/).

Because the API is stateless, this Bearer token must be included in every request to the API.
The Authorization header MUST be of the following format:

`Authorization: Bearer {token-value}` 


#Resource Operations

Standard CRUD operations on resources are performed using HTTP verbs.

* GET - Retrieve a resource, never modifies data
* POST - Create a resource or perform other non-data operations (e.g. trigger a system event)
* PUT - Update a resource
* DELETE - Delete a resource

#Cache Headers

The current state of a resource is identified by an opaque key in the ETag HTTP header of the response to a requested resource.
This key can be used for change detection and intermediate caching. Standard HTTP caching rules are adhered to by the API server (e.g. responding with 304 Not Modified).

#URI Format

Resource URIs will generally follow a format similar to those shown below.

* Resource Collection - `http://panelname.pdk.io/api/v1/{resource-name}`
* Specific Resource - `http://panelname.pdk.io/api/v1/{resource-name}/{id}`
* Related Resource Collection - `http://panelname.pdk.io/api/v1/{resource-name}/{id}/{related-resource}`
* Specific Related Resource - `http://panelname.pdk.io/api/v1/{resource-name}/{id}/{related-resource}/{id}`

# Filtering, Fields, and Sorting
Most of the collection endpoints support a set of uniform query parameters that allow for filtering the data, selecting specific fields, and setting the sort order of the result.

## Filtering

## Fields

## Sorting

# Group People
A person entity represents the attributes of a person that will be interacting with the access control system.
These attributes include things like a name, a list of credentials, list of group membership, and others. 

## People Collection [/people]
## List all People [GET]
+ Response 200 (application/json)

    

# Group Notes
Notes related resources of the **Notes API**

## Notes Collection [/notes]
### List all Notes [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]

### Create a Note [POST]
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

## Note [/notes/{id}]
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Note [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Remove a Note [DELETE]
+ Response 204
