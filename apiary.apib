FORMAT: 1A
HOST: https://panel-id.pdk.io/api

# PDK Panel API

The PDK Panel API provides for programmatic access to CRUD operations on entities and a realtime event stream from the PDK Access Control system.

The API conforms to many of the tenets of the REST style architecture and fully embraces the HTTP standard to fulfill many of these.

* Stateless
* Cacheable
* A URL identifies a Resource
* Operations conveyed implicitly through HTTP verbs

This drives certain uniform architectural attributes of the API.

# Authentication

Authenticating to this stateless API is handled by including an HTTP Authentication header in each request.
Before making any requests to the panel's API andpoint you will need a Bearer token.
This token represents your application's permission to access the API as delegated by the user.

For instructions on retrieving a token for communicating with a panel's API, see the [Auth Server API documentation](http://docs.pdkauthapi.apiary.io/). There are quite many libaries that support OpenID Connect protocol which is used for authentication. Please check [this link](https://openid.net/developers/libraries/) to see the list with some of them.

Because the API is stateless, this Bearer token must be included in every request to the API.
The Authorization header MUST be of the following format:

`Authorization: Bearer {token-value}`


# Resource Operations

Standard CRUD operations on resources are performed using HTTP verbs.

* GET - Retrieve a resource, never modifies data.
* POST - Create a resource. All required fields must be specified. In case when one of optional parameters is not specified, it's default value will be used.
* PUT - Update a resource. Requires whole resource body to be specified.
* DELETE - Delete a resource.


# Cache Headers

The current state of a resource is identified by standard HTTP caching mechanisms in the response to a requested resource (e.g. ETag, Last-Modified, cache-control).
These headers can be used for change detection and intermediate caching.

Most HTTP stacks (including your browser address bar) automatically deal with caching headers in a bandwidth, proxy, and user-friendly way.


# URI Format

Resource URIs will generally follow a format similar to those shown below.

* Resource Collection - `https://panel-id.pdk.io/api/{resource-name}`
Example - `https://panel-id.pdk.io/api/persons`
* Specific Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}`
Example - `https://panel-id.pdk.io/api/persons/1`
* Related Resource Collection - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}`
Example - `https://panel-id.pdk.io/api/persons/1/groups`
* Specific Related Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}/{id}`
Example - `https://panel-id.pdk.io/api/persons/1/groups/2`


# Pagination

Most of calls that return collections return paginated results in order to decrease panel server load 
(see `page` and `per_page` url query parameters).
Response contains link headers with links to first, last, next and prevous pages of results, 
which are specified in `first`, `last`, `next` and `prev` links accordingly.

For example, calling `GET https://panel-id.pdk.io/api/persons?page=1&per_page=5` will lead for the following headers:

```
Link: <https://panel-id.pdk.io/api/persons?per_page=5>; rel="first",
    <https://panel-id.pdk.io/api/persons?page=3?per_page=5>; rel="prev",
    <https://panel-id.pdk.io/api/persons?page=3&per_page=5>; rel="next",
    <https://panel-id.pdk.io/api/persons?page=2&per_page=5>; rel="last"
X-Total-Count: 11
```

# Content type

Content type is set to `application/json` for all API calls.


# Response Codes

## HTTP Codes
* `200` - OK status with JSON body
* `204` - OK status without body
* `400` - Bad Request
* `401` - Unauthorized
* `403` - Forbidden
* `404` - Not Found
* `422` - Unprocessable Entity
* `500` - Internal Server Error

## Error message format

Error messages provide human-readable description. For now only English language is supported, localization support will come in next releases.

    {
        "message" : "Human-friendly error message",
        "errors": {
            "field": "Human-friendly error message related to certain field (optional)"
        }
    }


# Roles
Roles permissions have hierarchical structure. List of possible roles given below:
* `Reporter` has read only access for Persons, Groups entities.
* `Manager` in addition to `Reporter` permissions has write access for Persons and Groups entities.
* `Admin` in addition to `Manager` permissions has write access for Persons, Groups, System Events, Auto Open Rules, Floor Groups entities.
* `Integrator` in addition to `Admin` permissions can change hardware configuration (Devices, Connections, Config and Websocket API commands).
* `Sysop` in addition to `Admin` permissions can change hardware configuration (Devices, Connections, Config and Websocket API commands).


# Group Search

The functionality is available for all roles. For [Reporter, Manager] roles search results will be filtered by user's partition.

### Global Search [GET /search?page={page}&per_page={per_page}&sort={sort_order}&q={query_string}]
+ Parameters

    + q (optional, string) ... Url-encoded query string. Search will be done in the following entities: Person (`firstName`, `lastName` and `cardNumber`), Group (`name`), Floor Group (`name`). Minimum length is `1` character, maximum length is `70` characters.
    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Entities are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of entity.
    + `type` (required, enum[string]) ... Type of entity.
        + Members
            + `person`
            + `group`
            + `floorGroup`
    + `name` (required, string) ... Entity name.
    + `description` (required, string) ... Entity description (will be equal to person's card number in case of search by card number).
    + `image` (required, string) ... Person photo URL. `null` will be returned if Person has no photo or entity is not a Person.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/search?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/search?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "type": "person",
                    "name": "Ted Froëdington",
                    "description": "654321123456",
                    "image": "http://url"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

# Group Persons
A person entity represents attributes of a person that will be interacting with the access control system.
These attributes include the person's first and last names, a list of their credentials, rules that apply to them, and a list of group memberships, among others.
The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Rerieving operations are also available for [Reporter] role.
All operations consider user's partition. Created Persons will be bound to user's partition by default.
For [Reporter, Manager] roles Persons will be filtered by their partition.
[Admin, Integrator, Sysop] users can change Person's partition.

## Persons Collection [/persons?page={page}&per_page={per_page}&sort={sort_order}]
        
### Retrieve all Persons [GET /persons?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Persons are sorted by `lastName`, `firstName` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Person's id.
    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `photoUrl` (optional, string) ... Person's account photo URL. `null` will be returned if Person has no photo.
    + `partition` (required, number) ... Partition that the Person is bound to.
    + `activeDate` (optional, string) ... The date since Person's data should be processed by server in format `YYYY-MM-DD`.
    + `expireDate` (optional, string) ... The date till Person's data should be processed by server in format `YYYY-MM-DD`.
    + `pin` (optional, string) ... The PIN that is bound to specific Person.
    + `duressPin` (optional, string) ... The duress PIN that is bound to specific Person. Defaults to '9' + PIN value.
    + `enabled` (required, boolean) ... Flag indicating whether should or should not the Person's data be processed by server.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/persons?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "firstName": "Ted",
                    "lastName": "Froëdington",
                    "partition": 0,
                    "photoUrl": "http://example.com/usersImages/32224.jpg"
                }
            ]
+ Response 401 (application/json)

### Delete multiple Persons [POST /persons/bulk-delete]
+ Parameters

    + persons (required, array) ... Array consisting of Ids of the persons to be deleted.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
        
            {
                "persons": [1, 2, 3]
            }
            
+ Response 200 (application/json)

    + `deleted` (required, array) ... Persons that were deleted.
    
    + Body
    
        {
            "deleted": [1, 3]
        }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Person [/persons/{person_id}]

+ Model

    + `firstName` (required, string) ...  Person's first name. Minimum length is `1` character, maximum length is `35` characters.
    + `lastName` (required, string) ...  Person's last name. Minimum length is `1` character, maximum length is `35` characters.  `firstName` + `lastName` combination should be unique.
    + `partition` (optional, number) ... Partition that the Person is bound to. Could be set only by Admin and higher.
    + `activeDate` (optional, string) ... The date since Person's data should be processed by server in format `YYYY-MM-DD`.
    + `expireDate` (optional, string) ... The date till Person's data should be processed by server in format `YYYY-MM-DD`.
    + `pin` (optional, string) ... The PIN that is bound to specific Person.
    + `duressPin` (optional, string) ... The duress PIN that is bound to specific Person. Defaults to '9' + PIN value.
    + `enabled` (optional, boolean) ... Flag indicating whether should or should not the Person's data be processed by server.

    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "firstName": "Ted",
                "lastName": "Froëdington",
                "partition": 0
            }

### Retrieve a Person [GET]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `partition` (required, number) ... Partition that the Person is bound to.
    + `photoUrl` (optional, string) ... Person's account photo URL. `null` will be returned if Person has no photo.
    + `activeDate` (optional, string) ... The date since Person's data should be processed by server in format `YYYY-MM-DD`.
    + `expireDate` (optional, string) ... The date till Person's data should be processed by server in format `YYYY-MM-DD`.
    + `enabled` (required, boolean) ... Flag indicating whether should or should not the Person's data be processed by server.
    + `pin` (optional, string) ... The PIN that is bound to specific Person.
    + `duressPin` (optional, string) ... The duress PIN that is bound to specific Person. Defaults to '9' + PIN value.
    + `cards` (required, array) ... Cards that belongs to the Person. Empty array will be returned if Person has no cards.
    + `groups` (required, array) ... Groups that the Person belongs to. Empty array will be returned if Person does not belong to any Group.
    
    + Body
    
            {
                "id": 1,
                "firstName": "Ted",
                "lastName": "Froëdington",
                "partition": 0,
                "photoUrl": "http://example.com/images/32224.jpg",
                "cards": [
                    {
                        "id": 1,
                        "cardNumber": 12345,
                        "description": "some text"
                    }
                ],
                "groups": [
                    {
                        "id": 1,
                        "name": "groupName"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Person [POST /persons]

+ Request (application/json)

    [Person][]
            
+ Response 200 (application/json)

    + `id` (required, number) ... Id of created entity.
    
    + Body
    
            {
                "id": 1
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)

### Update a Person [PUT]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    + `firstName` (required, string) ...  Person's first name. Minimum length is `1` character, maximum length is `35` characters.
    + `lastName` (required, string) ...  Person's last name. Minimum length is `1` character, maximum length is `35` characters. `firstName` + `lastName` combination should be unique.
    + `partition` (optional, number) ... Partition that the Person is bound to. Could be set only by Admin and higher.
    + `activeDate` (required, string) ... The date since Person's data should be processed by server in format `YYYY-MM-DD`. `null` should be passed if date is not set.
    + `expireDate` (required, string) ... The date till Person's data should be processed by server in format `YYYY-MM-DD`. `null` should be passed if date is not set.
    + `pin` (required, string) ... The PIN that is bound to specific Person.
    + `duressPin` (required, string) ... The duress PIN that is bound to specific Person. Defaults to '9' + PIN value.
    + `enabled` (required, boolean) ... Flag indicating whether should or should not the Person's data be processed by server.
    
    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "firstName": "Ted",
                "lastName": "Froëdington",
                "partition": 0,
                "activeDate": "2016-05-05",
                "expireDate": "2017-05-05",
                "pin": null,
                "duressPin": null,
                "enabled": true
            }
            
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)

### Delete a Person [DELETE]
Person removal leads to all Person's Rules removal.

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Photo [/persons/{person_id}/photo]

### Update person photo [PUT]

+ Request (application/json)

    + `base64` (required, string) ... Value in base64 format. To remove Person's photo null should be pased.
    
    + Headers
    
            Authorization: Bearer {token}
            
    + Body
    
            {
                "base64": "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24="
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Person Cards [/persons/{person_id}/cards]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles.  Retrieving Cards is also available for the [Reporter] role.
[Manager, Reporter] have an access to Cards that bound to Persons from their own partition only.

+ Model

    + `cardNumber` (required, number) ... Card number. Must be unique among all persons. Maximum value is 99999999999.
    + `description` (optional, string) ... Card description. Minimum length is `1` character, maximum length is `255` characters.
    
    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "cardNumber": 123,
                "description": "Card description"
            }


### Retrieve all Cards [GET /persons/{person_id}/cards?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + person_id (required, number) 
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Cards are sorted by `cardNumber` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of the Card.
    + `cardNumber` (required, number) ... Card number.
    + `description` (optional, string) ... Card description.  Maximum length is `255` characters.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/cards?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/cards?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 1,
                    "cardNumber": 12321,
                    "description": "myCard"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Retrieve a Card [GET /persons/{person_id}/cards/{card_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of the Card.
    + `cardNumber` (required, number) ... Card number.
    + `description` (optional, string) ... Card description. Maximum length is `255` characters.
    
    + Body
    
            {
                "id": 1,
                "cardNumber": 123,
                "description": "Card description"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Card [POST]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Cards][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Card [DELETE /persons/{person_id}/cards/{card_id}]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Rules Collection [/persons/{person_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]

#### List of access rules, event rules and elevator rules that apply to this Person.

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.
[Manager, Reporter] have an access to Rules that bound to Persons from their own partition.
[Manager] can change Rule's Doors list. Only Doors from [Manager]'s partition could be added. Any Door present in the Rule could be removed.

### Retrieve Rules Collection for a Person [GET]
+ Parameters

    + person_id (required, number)
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, number) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `alwaysOnValidCard`
                + `onDuress`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                    Does need a `target` to be specified.
                + `forceToggle`
                    Does need a `target` to be specified.
                + `forceOpen`
                    Does need a `target` to be specified.
                + `forceClose`
                    Does need a `target` to be specified.
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
        
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/231/rules?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/persons/231/rules?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1,
                            "name": "Floor Group 1",
                            "floors": [
                                {
                                    "id": 1,
                                    "name": "Door 1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "whenAllowed",
                    "action": "delayOpen",
                    "delay": "00:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "selected",
                    "targetDoors": [
                        {
                            "id": 2,
                            "name": "Door 2"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

## Person Rules  [/persons/{person_id}/rules]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving a Rule is also available for the [Reporter] role.

+ Model

    + Common parameters for all rule types
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array[number]) ... Door `id`s on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array[number]) ... Floor Group `id`s on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name. Minimum length is `1` character, maximum length is `70` characters.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `onDuress`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                    Does need a `target` to be specified.
                + `forceToggle`
                    Does need a `target` to be specified.
                + `forceOpen`
                    Does need a `target` to be specified.
                + `forceClose`
                    Does need a `target` to be specified.
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only. Should be at least 1 second.
        + `sourceDoors` (required, array[number]) ... Door `id`s considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array[number]) ... Door `id`s on which action should be performed. Must be provided when `target`=`selected`.
        
    + Headers
    
            Authorization: Bearer {token}    
            
    + Body
    
            {
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "floorGroups": [ 1, 3 ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "singleDate": "2016-02-23",
                "doors": [ 132, 133 ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "delay": "00:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "sourceDoors": [ 1, 3 ],
                "target": "source"
            }

### Retrieve a Rule for a Person  [GET /persons/{person_id}/rules/{rule_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, number) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `onDuress`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                    Does need a `target` to be specified.
                + `forceToggle`
                    Does need a `target` to be specified.
                + `forceOpen`
                    Does need a `target` to be specified.
                + `forceClose`
                    Does need a `target` to be specified.
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
            
    + Body
    
            {
                "id": 1,
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "floorGroups": [
                    {
                        "id": 1,
                        "name": "Floor Group 1",
                        "floors": [
                            {
                                "id": 1,
                                "name": "Door 1"
                            }
                        ]
                    }
                ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132,
                        "name": "Door 1"
                    }
                ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "delay": "00:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Rule for a Person  [POST /persons/{person_id}/rules]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Rule for a Person [PUT /persons/{person_id}/rules/{rule_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Rule for a Person [DELETE /persons/{person_id}/rules/{rule_id}]
+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Person Groups [/persons/{person_id}/groups]

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. [Reporter] role has access for retrieving operations only.
[Manager] can remove Person from any Group he is partiticipating but he is able to add the Person to Groups from the partition he is bound to only.

### Retrieve all Groups for a Person [GET /persons/{person_id}/groups?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + person_id (required, number)
        Numeric `id` of the Person to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/32/groups?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/persons/32/groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11

    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

### Retrieve a Group for a Person  [GET /persons/{person_id}/groups/{group_id}]

+ Parameters

    + person_id (required, number) ... Numeric `id` of the Person to perform the action on.
    + group_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
            
+ Response 200 (application/json)

    + Body
    
            {
                "id": 1,
                "name": "group1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

### Assign several Groups for a Person [PUT /persons/{person_id}/groups]

+ Parameters

    + groups (required, array) ... Array consisting of Ids of the groups to be assigned to a Person.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
        
            {
                "groups": [1, 2]
            }
            
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

### Remove a Person from a Group [DELETE /persons/{person_id}/groups/{group_id}]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)   

# Group Groups

A group entity represents a set of shared rules that apply to people that are members of the group.
The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving operations are also available for [Reporter] role.
All operations consider user's partition. Created Group will be bound to user's partition by default.
For [Reporter, Manager] roles Groups will be filtered by their partition.
[Admin, Integrator, Sysop] users can change Group's partition.

## Groups Collection [/groups?page={page}&per_page={per_page}&sort={sort_order}]

### Retrieve All Groups [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
            
    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

## Group [/groups/{group_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.

+ Model 

    + `name` (required, string) ... Group name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    
    + Headers
    
            Authorization: Bearer {token}
            
    + Body
    
            {
                "name": "group1"
            }

### Retrieve a Group [GET]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `name` (required, string) ...  Group name.

    + Body
    
            {
                "id": 1,
                "name": "group1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Group [POST /groups]

+ Request (application/json)

    [Group][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 422 (application/json)


### Update a Group [PUT]

+ Request (application/json)

    [Group][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)


### Delete a Group [DELETE]

+ Request
Group removal leads to all Group's Rules removal.

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Group Rules Collection [/groups/{group_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]

#### List of access rules, event rules and elevator rules that apply to this Group.

The functionality is available for [Sysop, Integrator, Admin, Manager] roles. Retrieving operation is also available for [Reporter] role.
[Manager, Reporter] have an access to Rules that bound to Persons from the partition they are bound to.
[Manager] can change Rule's Doors list. Only Doors from [Manager]'s partition could be added. Any Door present in the Rule could be removed.

### Retrieve Rules Collection for a Group [GET]
+ Parameters

    + group_id (required, number)
        Numeric `id` of the Group to perform the action on.
    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, string) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `onDuress`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                    Does need a `target` to be specified.
                + `forceToggle`
                    Does need a `target` to be specified.
                + `forceOpen`
                    Does need a `target` to be specified.
                + `forceClose`
                    Does need a `target` to be specified.
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups/43/rules?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/groups/43/rules?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1,
                            "name": "Floor Group 1",
                            "floors": [
                                {
                                    "id": 1,
                                    "name": "Door 1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "whenAllowed",
                    "action": "delayOpen",
                    "delay": "00:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "source"
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

## Group Rules [/groups/{group_id}/rules]

### Retrieve a Rule for a Group  [GET /groups/{group_id}/rules/{rule_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, string) ... Numeric rule `id`.
        + `type` (required, enum[string])
            Type of a given rule.
            + Members
                + `door`
                + `elevator`
                + `event`
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
        + `authenticationPolicy` (optional, string)
            Authentication policy that should be applied on the certain Device.
            + Default: `cardOnly`
            + Members
                + `cardOnly` - grant access by card only
                + `pinOnly` - grant access by PIN only
                + `cardOrPin` - grant access by either card or PIN
                + `cardAndPin` - grant access by both card and PIN
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, enum[string])
            Type of event on which action should be performed.
            + Members
                + `whenAllowed`
                + `whenDeniedExplicit`
                + `whenDeniedNoRules`
                + `onDuress`
                + `alwaysOnValidCard`
                + `onDoubleSwipeAllow`
                + `onTripleSwipeAllow`
                + `onQuadrupleSwipeAllow`
        + `action` (required, enum[string])
            Operation that should be performed.
            + Members
                + `sendEmail`
                    Does need an `emailTemplate` to be specified.
                + `doNotDisturb`
                    Does need a `target` to be specified.
                + `forceToggle`
                    Does need a `target` to be specified.
                + `forceOpen`
                    Does need a `target` to be specified.
                + `forceClose`
                    Does need a `target` to be specified.
                + `open`
                    Does need a `target` to be specified.
                + `close`
                    Does need a `target` to be specified.
                + `lockdownOn`
                    Does need a `target` to be specified.
                + `lockdownOff`
                    Does need a `target` to be specified.
                + `delayOpen`
                    Does need a `target` and a `delay` to be specified.
                + `delayClose`
                    Does need a `target` and a `delay` to be specified.
                + `openClose`
                    Does need a `target` and a `delay` to be specified.
        + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
            + Members
                + `source`
                + `selected`
        + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Body
    
            {
                "id": 1,
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "floorGroups": [
                    {
                        "id": 1,
                        "name": "Floor Group 1",
                        "floors": [
                            {
                                "id": 1,
                                "name": "Door 1"
                            }
                        ]
                    }
                ]
            }
            
            {
                "id": 1,
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132,
                        "name": "Front Door"
                    }
                ]
            }
            
            {
                "id": 1,
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "whenAllowed",
                "action": "delayOpen",
                "delay": "00:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Rule for a Group  [POST /groups/{group_id}/rules]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Rule for a Group [PUT /groups/{group_id}/rules/{rule_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Rule for a Group [DELETE /groups/{group_id}/rules/{rule_id}]
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Group Persons [/groups/{group_id}/persons]

The functionality is available for [Sysop, Integrator, Admin, Manager, Reporter] roles.
[Manager] can remove any Person from Group that he has access to but only Person from the partition that user is bound to cound be added.

### Retrieve all Persons [GET /groups/{group_id}/persons?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Group to perform the action on.
    + page (optional, number) 
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Persons are sorted by `lastName`, `firstName` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Person's id.
    + `firstName` (required, string) ...  Person's first name.
    + `lastName` (required, string) ...  Person's last name.
    + `photoUrl` (optional, string) ... Person's account photo URL.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups/12/persons?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/groups/12/persons?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "firstName": "Ted",
                    "lastName": "Froëdington",
                    "photoUrl": "http://example.com/usersImages/32224.jpg"
                }
            ]
+ Response 401 (application/json)

### Assign several Persons for a Group [PUT /groups/{group_id}/persons]

+ Parameters

    + persons (required, array) ... Array consisting of Ids of the persons to be assigned to a Group.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
        
            {
                "persons": [1, 2]
            }
            
+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

# Group System Events

#### List of event rules that apply to system-wide events, which are events not generated by a single person or group.

## System Events Rules Collection [/system_events?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Sysop, Integrator, Admin] roles.

### Retrieve System Events Collection [GET]
+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id`  (required, number) .. Numeric event `id`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `onAnyDuress`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
            + `onComLoss`
            + `onComLossCleared`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
                Does need a `target` to be specified.
            + `forceToggle`
                Does need a `target` to be specified.
            + `forceOpen`
                Does need a `target` to be specified.
            + `forceClose`
                Does need a `target` to be specified.
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
    + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/system_events?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/system_events?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "onDoorClose",
                    "action": "delayOpen",
                    "delay": "00:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ],
                    "target": "selected",
                    "targetDoors": [
                        {
                            "id": 2,
                            "name": "Door 2"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)

## System Events Rules [/system_events]

+ Model

    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + `name` (required, string) ... Rule name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `onAnyDuress`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
            + `onComLoss`
            + `onComLossCleared`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
                Does need a `target` to be specified.
            + `forceToggle`
                Does need a `target` to be specified.
            + `forceOpen`
                Does need a `target` to be specified.
            + `forceClose`
                Does need a `target` to be specified.
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
    + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
            + Members
                + `to`
                    Array of recipients.
                + `subject`
                    Subject of the email.
                + `body`
                    Email text.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types. Should be at least 1 second.
    + `sourceDoors` (required, array[number]) ... Door `id`s considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array[number]) ... Door `id`s on which action should be performed. Must be provided when `target`=`selected`.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "name": "MyEventRule",
                "triggerType": "onDoorClose",
                "action": "delayOpen",
                "delay": "00:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "sourceDoors": [ 1, 3 ],
                "target": "selected",
                "targetDoors": [ 2, 3 ]
            }

### Retrieve a System Event Rule [GET /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id`  (required, number) .. Numeric event `id`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, enum[string])
        Type of event on which action should be performed. 
        + Members
            + `onDoorOpen`
            + `onDoorClose`
            + `onDoorPropped`
            + `onDoorForced`
            + `onPropCleared`
            + `onAnyDuress`
            + `allPropCleared`
            + `onRexOpen`
            + `onRexClose`
            + `onCardSwipe`
            + `onCardNotFound`
            + `onComLoss`
            + `onComLossCleared`
    + `action` (required, enum[string])
        Operation that should be performed.
        + Members
            + `sendEmail`
                Does need an `emailTemplate` to be specified.
            + `doNotDisturb`
                Does need a `target` to be specified.
            + `forceToggle`
                Does need a `target` to be specified.
            + `forceOpen`
                Does need a `target` to be specified.
            + `forceClose`
                Does need a `target` to be specified.
            + `open`
                Does need a `target` to be specified.
            + `close`
                Does need a `target` to be specified.
            + `lockdownOn`
                Does need a `target` to be specified.
            + `lockdownOff`
                Does need a `target` to be specified.
            + `delayOpen`
                Does need a `target` and a `delay` to be specified.
            + `delayClose`
                Does need a `target` and a `delay` to be specified.
            + `openClose`
                Does need a `target` and a `delay` to be specified.
            + `emailTemplate` (optional, object) ... Template for email. Used with `sendEmail` action type only.
                + Members
                    + `to`
                        Array of recipients.
                    + `subject`
                        Subject of the email.
                    + `body`
                        Email text.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `target` (optional, enum[string]) ... Target doors type. In case when `source` value provided `targetDoors` parameter is not required.
        + Members
            + `source`
            + `selected`
    + `targetDoors` (optional, array) ... List of doors which action should be performed on. Must be provided when `target`=`selected`.
    
    + Body
    
            {
                "id": 1,
                "name": "MyEventRule",
                "triggerType": "onDoorClose",
                "action": "delayOpen",
                "delay": "00:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1,
                        "name": "Door 1"
                    }
                ],
                "target": "selected",
                "targetDoors": [
                    {
                        "id": 2,
                        "name": "Door 2"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)

### Create a System Event Rule  [POST /system_events]

+ Request (application/json)

    [System Events Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created event rule.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a System Event Rule [PUT /system_events/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [System Events Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a System Event Rule [DELETE /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Auto Open

#### List of access rules that represent the times that doors should be propped open.

The functionality is available for [Sysop, Integrator, Admin] roles.
## Auto Open Rules Collection [/auto_open?page={page}&per_page={per_page}&sort={sort_order}]

### Retrieve Auto Open Rules Collection [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Rules are sorted by `id` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of a rule.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/auto_open?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/auto_open?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
            
    + Body
    
            [
                {
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Mon",
                        "Tue"
                    ],
                    "doors": [
                        {
                            "id": 1,
                            "name": "Door 1"
                        }
                    ]
                }
            ]
            
+ Response 400 (application/json)
+ Response 401 (application/json)

## Auto Open Rules [/auto_open]

+ Model

    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format. Must be greater than `startTime`.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`. Must be today or later.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array[number]) ... Door `id`s on which rule should be performed.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Mon",
                    "Tue"
                ],
                "doors": [ 132, 133 ]
            }
            
### Retrieve an Auto Open Rule [GET /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Auto Open Rule to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of a rule.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array[string]) ... Days of week when a rule should be performed. Possible values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.
            
    + Body
    
            {
                "id": 1,
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 1,
                        "name": "Front Door"
                    }
                ]
            }

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 404 (application/json)

### Create an Auto Open Rule  [POST]

+ Request (application/json)

    [Auto Open Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created rule.

    + Body
    
            {
                "id": "1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update an Auto Open Rule [PUT /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Auto Open Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete an Auto Open Rule [DELETE /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Floor Groups

#### Associates a reader input and a group of floor outputs. This group is then referenced from an elevator rule on a person or group to activate all the floor buttons in the elevator car where input reader is installed.
The functionality is available for [Sysop, Integrator, Admin] roles. Retrieveing Floor Groups list is also available for [Manager] role.
All operations consider user's partition. Created Floor Group will be bound to user's partition by default.
[Manager] can retrieve only list of Floor Groups that are bound to the partition that he is bound to.
## Floor Groups Collection [/floor_groups?page={page}&per_page={per_page}&sort={sort_order}]

### Retrieve all Floor Groups [GET]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
        + Default: `0`
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
        + Default: `10`
    + sort (optional, enum[string])
        Sorting order. Floor groups are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric group `id`.
    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, object) ... Reader device info.
        + Members
            + `id` - Reader port id.
            + `name` - Reader port name.
    + `readerPortName` (required, string) ... Reader device `name`.
    + `floors` (required, array) ... List of doors in current Floor Group.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/floor_groups?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/floor_groups?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
        
    + Body
    
            [
                {
                    "id": 1,
                    "name": "Public Floors",
                    "readerPort": 1,
                    "readerPortName": "Reader 1",
                    "floors": [
                        {
                            "id": 1,
                            "name": "Floor 1"
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Floor Groups [/floor_groups]

+ Model

    + `name` (required, string) ... Floor Group name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `partition` (optional, number) ... Partition id that Floor Group is bound to.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array[number]) ... Doors `id`s which belong to this Floor Group.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "name": "Public Floors",
                "partition": 1,
                "readerPort": 1,
                "floors": [ 1, 3 ]
            }


### Retrieve a Floor Group [GET /floor_groups/{group_id}]

+ Parameters

    + group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric group `id`.
    + `name` (required, string) ... Floor Group name.
    + `partition` (required, number) ... Partition id that Floor Group is bound to. If field is empty, User's partition will be used.
    + `readerPort` (required, object) ... Reader device info.
        + Members
            + `id` - Reader port id.
            + `name` - Reader port name.
    + `floors` (required, array) ... List of doors in current Floor Group.
        
    + Body
    
            {
                "id": 1,
                "name": "Public Floors",
                "partition": "1",
                "readerPort": 
                    {
                        "id": 1,
                        "name": "Reader 1"
                    },
                "floors": [
                    {
                        "id": 1,
                        "name": "Floor 1"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Floor Group  [POST]

+ Request (application/json)

    [Floor Groups][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Floor Group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Floor Group [PUT /floor_groups/{floor_group_id}]

+ Parameters

    + floor_group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.

+ Request (application/json)

    + `name` (required, string) ... Floor Group name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `partition` (required, number) ... Partition id that Floor Group should be bound to.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array[number]) ... Doors `id`s which belong to this Floor Group.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "name": "Public Floors",
                "partition": 1,
                "readerPort": 1,
                "floors": [ 1, 3 ]
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Floor Group [DELETE /floor_groups/{group_id}]
Floor Group removal leads to Elevator Rules removal when the specified Floor Group is the only one used in correspond Rule.
+ Parameters

    + group_id (required, number) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Devices

#### A device entity represents the attributes of a board port that is connected with end devices which represent a physical object (door, a reader in an elevator car, etc.). These attributes include the device's name, a connection properties (port number, wireless address) and list of enabled features.

The functionality is available for [Sysop, Integrator] roles. Retrieving Devices list is also available for [Manager, Admin] roles.
All operations consider user's partition. [Manager] can retrieve list of Devices that are bound to the same partition as he is bound to.
Created Devices will be bound to user's partition by default.

### Retrieve Devices Collection [GET /devices?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Devices are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Device id.
    + `name` (required, string) ...  Device name.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device. Field presents only for devices with `wirelessCoordinator` connection type.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set).
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    + `authenticationPolicy` (optional, string)
        Authentication policy that should be applied on the certain Device.
        + Default: null - do not apply any policy
        + Members
            + `cardOnly` - grant access by card only
            + `pinOnly` - grant access by PIN only
            + `cardOrPin` - grant access by either card or PIN
            + `cardAndPin` - grant access by both card and PIN
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/devices?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/devices?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "delay": 0,
                    "dwell": 1,
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true,
                    "autoOpenAfterFirstAllow": true
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Devices [/devices]

+ Model

    + `name` (required, string) ...  Device name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device. Should be present only for devices with `wirelessCoordinator` connection type.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating. It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated. It is an integer in `1`...`9999` range including borders.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set). It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    + `authenticationPolicy` (optional, string)
        Authentication policy that should be applied on the certain Device.
        + Default: null - do not apply any policy
        + Members
            + `cardOnly` - grant access by card only
            + `pinOnly` - grant access by PIN only
            + `cardOrPin` - grant access by either card or PIN
            + `cardAndPin` - grant access by both card and PIN
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
            }

### Retrieve a Device [GET /devices/{device_id}]

+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Device id.
    + `name` (required, string) ...  Device name.
    + `partition` (required, array[object]) ... Partitions list that Device is bound to.
    + `connection` (required, number) ... `id`, `name` and `type` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device. Field presents only for devices with `wirelessCoordinator` connection type.
    + `delay` (optional, number)
        Amount of time (in tenths of second) that the relay should delay before actuating.
        + Default: `0`
    + `dwell` (optional, number)
        Amount of time (in tenths of second) that the relay should stay actuated.
        + Default: `30`
    + `dps` (optional, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set).
        + Default: `0`
    + `rex` (optional, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (optional, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    + `authenticationPolicy` (optional, string)
        Authentication policy that should be applied on the certain Device.
        + Default: null - do not apply any policy
        + Members
            + `cardOnly` - grant access by card only
            + `pinOnly` - grant access by PIN only
            + `cardOrPin` - grant access by either card or PIN
            + `cardAndPin` - grant access by both card and PIN
        
    + Body
    
            {
                    "id": 10,
                    "name": "Front Door",
                    "partition": [
                        {
                            "id": 0,
                            "name": "Default"
                        },
                        {
                            "id": 1,
                            "name": "Custom"
                        }
                    ],
                    "connection": {
                        "id": 1,
                        "name": "connection1",
                        "type": "wirelessCoordinator"
                    }
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Device [POST]

+ Request (application/json)

    [Devices][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Device.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Device [PUT /devices/{device_id}]

+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.

+ Request (application/json)

    + `name` (required, string) ...  Device name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `connection` (required, number) ... `id` of connection that this device is associated with.
    + `port` (required, number) ... Board port number. An integer from `1` to `32`. The port must not be occupied by another device (i.e. connection + port pair must be unique).
    + `wirelessAddress` (optional, string) ... Wireless address of this device. Should be present only for devices with `wirelessCoordinator` connection type.
    + `delay` (required, number)
        Amount of time (in tenths of second) that the relay should delay before actuating. It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `dwell` (required, number)
        Amount of time (in tenths of second) that the relay should stay actuated. It is an integer in `1`...`9999` range including borders.
        + Default: `30`
    + `dps` (required, boolean)
        Enables Door Position Sense (DPS) feature for this door.
        + Default: `false`
    + `propAlarm` (optional, boolean)
        Enables alarm if a door left open more than `propDelay` timeout (specified only in case `dps` flag is set).
        + Default: `false`
    + `propDelay` (optional, number)
        Amount of time (in seconds) before PropAlarm is triggered (specified only in case `propAlarm` flag is set). It is an integer in `0`...`9999` range including borders.
        + Default: `0`
    + `rex` (required, boolean)
        Enables Request to Exit (REX) feature for this door.
        + Default: `false`
    + `forcedAlarm` (optional, boolean)
        Flag indicates enabling Forced Alarm when the door is opened without REX being triggered or a card read at the door (specified only in case `rex` and `dps` flags are set).
        + Default: `false`
    + `autoOpenAfterFirstAllow` (required, boolean)
        Flag indicates enabling Auto Open After First Allow feature for this door.
        + Default: `false`
    + `authenticationPolicy` (optional, string)
        Authentication policy that should be applied on the certain Device.
        + Default: null - do not apply any policy
        + Members
            + `cardOnly` - grant access by card only
            + `pinOnly` - grant access by PIN only
            + `cardOrPin` - grant access by either card or PIN
            + `cardAndPin` - grant access by both card and PIN
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Front Door",
                    "connection": 1,
                    "port": 1,
                    "wirelessAddress": "0013A200400A393B",
                    "delay": 0,
                    "dwell": 1,
                    "propAlarm": true,
                    "propDelay": 30,
                    "dps": true,
                    "rex": true,
                    "forcedAlarm": true,
                    "autoOpenAfterFirstAllow": true
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Device [DELETE /devices/{device_id}]
Device removal leads to Floor Groups and Rules removal when the specified Device is the only one used in correspond Floor Group or Rule.
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

## Commands [/devices/{device_id}/]
Executing commands on the specified device.

### Open a Door [POST /devices/{device_id}/open]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
  
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
            
    + Body
        
            {
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Close a Door [POST /devices/{device_id}/close]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
  
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
            
    + Body
        
            {
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Open and Close a Door [POST /devices/{device_id}/openclose]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
    
        + delay: 10 (required, number)
            Amount of time (in tenths of second) that the relay should delay between open and close actuations. It is an integer in [`0`...`9999`] range inclusive.
            
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "delay": 10,
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Open a Door with delay [POST /devices/{device_id}/delayopen]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
    
        + delay: 10 (required, number)
            Amount of time (in tenths of second) that the relay should delay between open and close actuations. It is an integer in [`0`...`9999`] range inclusive.
        
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "delay": 10,
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Close a Door with delay [POST /devices/{device_id}/delayclose]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
    
        + delay: 10 (required, number)
            Amount of time (in tenths of second) that the relay should delay between open and close actuations. It is an integer in [`0`...`9999`] range inclusive.

        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "delay": 10,
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### DND command for Door [POST /devices/{device_id}/dnd]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
  
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}
            
    + Body
        
            {
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Forcetoggle command for Door [POST /devices/{device_id}/forcetoggle]
+ Parameters

    + device_id (required, number) ... Numeric `id` of the Device to perform the action on.
    
+ Request (application/json)

    + Attributes (object)
  
        + person: 33 (number)
            The `id` of the Person that requested the command. This is used to impersonate a Person and will be logged as if they actuated the command and the API User identity is logged as the impersonator, otherwise the request is logged with the API User's identity.

    + Headers
    
            Authorization: Bearer {token}    
            
    + Body
        
            {
                "person": 33
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Connections

#### A connection entity represents the attributes of a connection with board(s) via concrete transport. These attributes include the connection's name and connection properties (e.g. serial port number in case of USB connected board).

The functionality is available for [Sysop, Integrator] roles.

### Retrieve Connections Collection [GET /connections?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Connections are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Connection id.
    + `name` (required, string) ...  Connection name.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `connected` (optional, boolean) ... Connection status.
    + `ipaddress` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of USB connection.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/connections?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/connections?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            [
                {
                    "id": 10,
                    "name": "Board 1",
                    "type": "ethernet",
                    "ipaddress": "192.168.1.1",
                    "port": 10001
                },
                {
                    "id": 11,
                    "name": "Board 2",
                    "type": "wirelessCoordinator",
                    "port": 7
                },
                {
                    "id": 12,
                    "name": "Board 3",
                    "type": "usb",
                    "port": 3
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Connections [/connections]

+ Model

    + `name` (required, string) ...  Connection name. Must be unique. Minimum length is `1` character, maximum length is `70` characters.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `ipaddress` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of Wireless or USB connection. It is an integer in `0`...`65535` range including borders for Ethernet connections and an integer in `0`...`31` range including borders for other types. In case of not `ethernet` type of connection `port` value must be unique.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                    "name": "Board 1",
                    "type": "ethernet",
                    "ipaddress": "192.168.1.1",
                    "port": 10001
            }

### Retrieve a Connection [GET /connections/{connection_id}]

+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Connection id.
    + `name` (required, string) ...  Connection name.
    + `type` (required, enum[string])
        Connection type.
        + Members
            + `wirelessCoordinator`
            + `ethernet`
            + `usb`
    + `ipaddress` (optional, string) ... Address of connection. Represents IP address in case of Ethernet connection.
    + `port` (required, number) ... Port number. Represents TCP port in case of Ethernet connection or serial port number in case of Wireless or USB connection.
        
    + Body
    
            {
                    "id": 12,
                    "name": "Board 3",
                    "type": "usb",
                    "port": 3
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Connection [POST]

+ Request (application/json)

    [Connections][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Connection.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Connection [PUT /connections/{connection_id}]

+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.

+ Request (application/json)

    [Connections][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Connection [DELETE /connections/{connection_id}]
Removal of a Connection used by any Devices is forbidden.
+ Parameters

    + connection_id (required, number) ... Numeric `id` of the Connection to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Config

#### A config entity represents system configuration entries.

The functionality is available for [Sysop, Integrator] roles.

## Config [/config]

+ Model

    + `logPurgeDays` (optional, number)
        Number of days to retain access log entries.
        + Default: `90`
    + `cardFormat` (optional, object)
        Card format that is used by readers in the system.
        + Members
            + `id`
            + `values` - Values according constraints
    + `ecards` (optional, array[number]) ... An array of 10 numbers that represent Ecards
    + `locale` (optional, enum[string])
        Locale that is used by for audit log writes and email templates.
        + Members
            + `en`
            + `ru`
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "logPurgeDays": 90,
                "cardFormat": {
                    "id": 1
                },
                "ecards": [99, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            }

### Retrieve Config [GET /config]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `logPurgeDays` (required, number)
        Number of days to retain access log entries.
    + `cardFormat` (required, object)
        Card format that is used by readers in the system.
        + Members
            + `id`
            + `name`
            + `values`
    + `ecards` (optional, array[number]) ... An array of 10 numbers that represent Ecards
        
    + Body
    
            {
                    "logPurgeDays": 90,
                    "cardFormat": "24bit_card_ids",
                    "ecards": [99, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            }

+ Response 401 (application/json)
+ Response 403 (application/json)

### Update Config [PUT /config]

+ Request (application/json)

    [Config][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

### Retrieve List Of Available Card Formats [GET /config/formats]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, integer) ... Card format id.
    + `name` (required, string) ... Card format name.
    + `constraints` (optional, object) ... Constraints description.
    + `values` (optional, object) ... Constraints values (only for currently active card format).
        
    + Body
    
            [
                {
                    "id": 9,
                    "name": "Custom Format Name",
                    "constraints": {
                        "constraint1": {
                            "type": "integer",
                            "desctiption": "Integer Value",
                            "required": "true"
                        }
                    },
                    "values": {
                        "constraint1" : 1
                    }
                }
            ]

+ Response 401 (application/json)
+ Response 403 (application/json)

### Add a New Card Format [POST /config/formats]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `cardFormat` (required, string) ... Card format that is used by readers in the system represented as string.
    The card format itself should represent a JavaScript module that exports at least 2 properties: `name` and `parse`. In addition it
    can export `constraints` property that represents description of card format constraints.
    Here is Card Format file description:
        + Members
            + `name` (required, string) - Name of the Card Format. Maximum length is 35.
            + `constraints` (optional, object) - Card Format constraints description. Each constraint is represented by property in the `constraints` object. Constraint value could be referenced in the `parse` function on this way: `constraints.<nameOfProperty>`.
                + Members
                    + `type` (required, enum[string]) - Type of constraint.
                        + Members
                            + `integer`
                            + `string`
                            + `array`
                    + `description` (required, string) - Constraint description. Maximum length is 35.
                    + `required` (optional, boolean) - Flag that indicates if constraint value is required. Defaults to `false`.
                    + `items` (optional, object) - Should be filled if `type` of the constraint is `array` (same way it is done in the JsonSchema)
                        + Members
                            + `type` (required, string) - Type of item.
                                + Members
                                    + `integer`
                                    + `string`
            + `parse` (required, function) - Function that performs calculation over given data. The first parameter is data and the second one is conatraints object filled with values.
        
    + Body
    
            [
                {
                    "cardFormat": 
                        "exports = {\n
                            name: 'Custom Format Name',\n
                            constraints: {\n
                                constraint1: {\n
                                    type: 'integer',\n
                                    description: 'Shift',\n
                                    required: 'true'\n
                                }
                            },\n
                            parse: function (cardNumber, constraints) {
                                return parseInt(cardNumber, 16) >> constraints.constraint1;
                            }
                        }"
                }
            ]

+ Response 401 (application/json)
+ Response 403 (application/json)

### Delete a Card Format [DELETE /config/formats/{format_id}]
Removal of standard Card Formats is forbidden.
+ Parameters

    + format_id (required, number) ... Numeric `id` of the Card Format to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 204 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Stream Oriented API

The stream-oriented API gives access to the main message stream of the panel.

This stream not only delivers event messages for state changes like credential scans, door opens, and data modifications, it can also be used to modify the state of the system by injecting command messages.

## Authentication

To authenticate to the event stream, a `token` parameter of a valid panel token must be set in the query string of the initial connection request to the root (`/`) URI.

An `error` message will be sent if the `token` is invalid or elided.

Since the panel token has a limited life, it must be refreshed once it has expired to continue receiving events. In order to refresh the token, a `renewedToken` message must be sent with a valid panel token specified in a solitary `token` parameter of the message body.

```
client.emit('renewedToken', { token: '<token goes here>' });
```

If a message is to be delivered for a connection with an expired token, the system will instead send `invalidToken` messages until the token is renewed. Once the token is renewed, the system will immediately deliver any messages that arrived while the token was expired.

## Message Format

Every message will have 2 manditory elements: `topic`, and `body`.

The `topic` uniquely identifies each type of message, as described later.

The `body` is where parameters for the message are contained and vary by message type.

```
{
  "topic": "message.topic",
  "body": { }
}
```

## Event Messages

Event messages are sent from the system when some state has changed. The topics of these messages are both the name of the message and are contained in the `topic` property of each.

### liveEvent

This message type represents a stream of audit events occuring in the system, including the audit message and any log parameters. This can be used to simply display human-readable event messages to users.

Unlike the other event messages, the `topic` property of this message correlates to the event type that caused the audit entry.

```
{
  "info": "DPS open has been detected on the device \"%s\".",
  "occurred":"2016-05-09 16:38:42",
  "topic":"door.input.dps.opened",
  "placeholders":[{
      "text": "Building Supply Room",
      "id": 8,
      "type": "door"
  }]
}
```

### door.request.allowed

This message is sent when a credential scan requested access to a door, a Person was found for the credential, and access was allowed.

```
{
  "topic": "door.request.allowed",
  "body": {
    "doorId": 26,  // The Device id of the door
    "personId": 36,  // The id of the Person that scanned
    "requestFactor": "CARD_ONLY",  // The authentication method used
    "cardNumber": "33855"  // The credential identifier that was read
  }
}
```

### door.request.denied

This message is sent when a credential scan requested access to a door, a Person was found for the credential, but access was not allowed.

```
{
  "topic": "door.request.denied",
  "body": {
    "doorId": 6,  // The Device id of the door
    "personId": 379,  // The id of the Person that scanned
    "explicit": false,  // Whether there was an explicit deny rule or the deny was implicit
    "requestFactor": "CARD_ONLY",  // The authentication method used
    "cardNumber": "188"  // The credential identifier that was read
  },
  "occurred":"2016-05-09 17:39:28"
}
```

### door.request.unknown

This message is sent when a credential scan requested access to a door, and a Person was not found that matched the credential.

```
{
  "topic":"door.request.unknown",
  "body":{
    "doorId": 6,  // The Device id of the door
    "cardNumber": "188"  // The credential identifier that was read
  }
}
```

### door.input.relay.on

This message is sent when the relay for a door is activated.

```
{
  "topic":"door.input.relay.on",
  "body":{
    "doorId":29  // The Device id of the door
  },
  "occurred":"2016-05-09 16:38:45"
}
```

### door.input.relay.off

This message is sent when the relay for a door is deactuated.

```
{
  "topic":"door.input.relay.off",
  "body":{
    "doorId":29  // The Device id of the door
  },
  "occurred":"2016-05-09 16:38:45"
}
```

### door.input.dps.opened

This message is sent when the door position sensor detects the door has opened.

```
{
  "topic":"door.input.dps.opened",
  "body":{
    "doorId": 10  // The Device id of the door
  },
  "occurred":"2016-05-09 17:14:20"
}
```

### door.input.dps.closed

This message is sent when the door position sensor detects the door has closed.

```
{
  "topic":"door.input.dps.closed",
  "body":{
    "doorId": 10  // The Device id of the door
  },
  "occurred":"2016-05-09 17:14:25"
}
```

### door.input.rex.on

This message is sent when the request to exit sensor is activated.

```
{
  "topic":"door.input.rex.on",
  "body":{
    "doorId": 10  // The Device id of the door
  },
  "occurred":"2016-05-09 17:14:25"
}
```

### door.input.rex.off

This message is sent when the request to exit sensor is deactivated.

```
{
  "topic":"door.input.rex.off",
  "body":{
    "doorId": 10  // The Device id of the door
  },
  "occurred":"2016-05-09 17:14:35"
}
```

### door.forceclose.on

This message is sent when the force close feature is enabled on a door.

```
{
  "topic":"door.forceclose.on",
  "body":{
    "doorId":6  // The Device id of the door
  },
  "occurred":"2016-05-09 17:15:45"
}
```

### door.forceclose.off

This message is sent when the force close feature is disabled on a door.

```
{
  "topic":"door.forceclose.off",
  "body":{
    "doorId":6  // The Device id of the door
  },
  "occurred":"2016-05-09 17:15:45"
}
```

### door.alarm.propped.on

This message is sent when the system detects that the door has been propped.

```
{
  "topic": "door.alarm.propped.on",
  "body": {
    "doorId": 15  // The Device id of the door that the alarm was raised on
  },
  "occurred": "2016-05-09 17:10:06"
}
```

### door.alarm.propped.off

This message is sent when a door propped alarm status is cleared.

```
{
  "topic": "door.alarm.propped.off",
  "body": {
    "doorId": 15  // The Device id of the door that the alarm was cleared on
  },
  "occurred": "2016-05-09 17:10:10"
}
```

### door.alarm.forced

This message is sent when the system detects that the door has been forced.

```
{
  "topic":"door.alarm.forced",
  "body":{
    "doorId": 6  // The Device id of the door
  },
  "occurred":"2016-05-09 17:44:20"
}
```

### door.alarm.forced.cleared

This message is sent when a door forced alarm status is cleared. This can be done using the `door.alarm.forced.clear` command message.

```
{
  "topic": "door.alarm.forced.cleared",
  "body": {
    "doorId": 6  // The Device id of the door
  },
  "occurred":"2016-05-09 17:44:52"
}
```

### endpoint.discovered

This message is sent in response to an `endpoint.discover` command. One message is sent per discovered endpoint.

```
{
  "topic": "endpoint.discovered",
  "body": {
    "ioLinkId": 1,
    "address": "0013a200400a393b",
    "ioLinkType": "wirelessCoordinator",
    "ioLinkName": "wimac",
    "doors": [
      { "id": 8,"port": 1, "name": "Building Supply Room" },
      { "id": 39,"port": 2, "name": "Coke Fountain" }
    ]
  }
}
```

### endpoint.signal

This message is sent in response to an `endpoint.querysignal` command. One response message is sent per request.

```
{
  "topic": "endpoint.signal",
  "body": {
    "ioLinkId": 1,
    "address": "0013a200400a393b",
    "dbGain": 40
  },
  "occurred": "2016-05-09 16:42:57"
}
```

## Command Messages

A `command` message can be sent to the stream to modify the state of the system. Commands are slightly different, as the message name `command` is always used for dispatching these messages while the `topic` contains the message topic.

```
client.emit('command', {
  id: '895f8d43-2279-4821-a0a4-2e16600a148d',
  topic: 'command.topic',
  body: { }
})
```

When a command is acted on by the system a `command.result.succeeded` message is sent, if a command fails then a `command.result.failed` message is sent.

The command message must contain a unique opaque `id` in order to correlate status response messages.

```
{
  "topic": "command.result.succeed",
  "body": {
    "commandId": "895f8d43-2279-4821-a0a4-2e16600a148d"  // The `id` of the command message
  }
}
```

### door.actuate.open

This command requests that the specified device be sent an open signal.

```
{
  "topic": "door.actuate.open",
  "body": {
    "doorId":6  // The Device id of the door to actuate
  },
  "id": "Uio5fTPKuDBoaDAODZxxSldYK7008TOt"
}
```

### door.actuate.close

This command requests that the specified devicd be sent a close signal.

```
{
  "topic": "door.actuate.close",
  "body": {
    "doorId": 6  // The Device id of the door to actuate
  },
  "id": "Uio5fTPKuDBoaDAODZxxSldYK7008TOu"
}
```

### door.try.open

This command requests that the system attempt to send an open/close to the specified door. This may fail if the door is in a state where this is not possible (e.g. auto open is in effect).

```
{
  "topic": "door.try.open",
  "body": {
    "doorId": 6  // The Device id of the door to actuate
  },
  "id": "Uio5fTPKuDBoaDAODZxxSldYK7008TOs"
}
```

### door.try.dwellopen

This command requests that the system hold a specified door open for a certain amount of time.

```
{
  "topic": "door.try.dwellopen",
  "body": {
    "doorId": 6,  // The Device id of the door to actuate
    "dwell": 3000  // The dwell time in 0.10 second units (300.0 seconds = 5 min)
  },
  "id": "9xgtULvpWKzWtkHvEiyygYcbqg5BOPJO"
}
```

### door.actuate.forcetoggle

This command toggles the override function on the door. If it is locked, it will be opened, if it is opened (e.g. auto open) it will be locked.

```
{
  "topic": "door.actuate.forcetoggle",
  "body": {
    "doorId": 6  // The Device id of the door
  },
  "id": "FLjQcqpGU3SfBH8l5jE4p7H6buO7UeL0"
}
```

### door.actuate.dnd

This command is used to toggle the do not disturb state on the specified door.

```
{
  "topic": "door.actuate.dnd",
  "body": {
    "doorId": 6  The Device id of the door to actuate
  },
  "id": "m0JUwfms78mdr0KWNTH2Oa4B9e68OSTb"
}
```

### door.alarm.forced.clear

This command is used to clear an active door forced alarm for a door.

```
{
  "topic": "door.alarm.forced.clear",
  "body": {
    "doorId": 6  // The Device id of the door
  },
  "id": "I14VcTrmoCjM2V5s3dNPO2QCE7JnNneD"
}
```


### endpoint.discover

This command initiates discovery of all visible wireless endpoints.

```
{
  "topic": "endpoint.discover",
  "body": { },
  "id": "1pLQ2y9Kai1oSlfeES7NhXWaAgDIILTp"
}
```

### endpoint.querysignal

This command queries the last-hop signal strength of the specified wireless endpoint.

```
{
  "topic": "endpoint.querysignal",
  "body": {
    "ioLinkId": 1,  // The connection ID for the wireless coordinator
    "address": "0013a200400a393b",  // The MAC address of the wireless device
    "actuateRelay": false,  // Whether to actuate the signalling relay on/off
    "relayDwell": 5  // How long to hold the signalling relay on
  },
  "id": "6Xa94zwzq14lAvlyUnQEkQKLt5Fy3U1p"
}
```

# Group Reports

#### A report entity represents a filter for the audit log entries.

The functionality is available for all roles.
Partitions logic is applied to all operations.
[Reporter, Manager] can remove any entity from Report's details that is present there at the moment but they can fill Report's details only with entities that they have access to according Role and Partition restrictions.

### Retrieve Reports Collection [GET /reports?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Report are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Report id.
    + `name` (required, string) ... Report name.
    + `period` (required, enum[string])
        Period type.
        + Members
            + `today`
            + `yesterday`
            + `thisWeek`
            + `thisMonth`
            + `lastWeek`
            + `lastMonth`
            + `custom`
    + `startDate` (required, string) ... Lower date bound in `YYYY-MM-DD` format for log filtering. Presents in the response only when `period` equals `custom`.
    + `stopDate` (required, string) ... Upper date bound in `YYYY-MM-DD` format for log filtering. Presents in the response only when `period` equals `custom`.
    + `event` (required, array[enum[string]])
        Event types list. `null` value indicates that no filtering by event will be performed.
        + Members
            + `door.autoopen.on`
            + `door.autoopen.off`
            + `door.input.cardread`
            + `door.input.dps.open`
            + `door.input.dps.close`
            + `door.input.rex.on`
            + `door.input.rex.off`
            + `door.alarm.propped.on`
            + `door.alarm.propped.off`
            + `door.alarm.propped.alloff`
            + `door.alarm.forced`
            + `endpoint.alarm.comloss.on`
            + `endpoint.alarm.comloss.off`
            + `door.request.duress`
            + `door.request.anyduress`
            + `door.request.found`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
    + `result` (required, array[enum[string]])
        Result types list. `null` value indicates that no filtering by result will be performed.
        + Members
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
            + `action.send.email`
            + `action.do.not.disturb`
            + `action.force.toggle`
            + `action.force.open`
            + `action.force.close`
            + `action.open`
            + `action.close`
            + `action.lockdown.on`
            + `action.lockdown.off`
            + `action.delay.open`
            + `action.delay.close`
            + `action.open.close`
    + `details` (required, object)
        Object contains list of entities ids that should be shown.
        + Members
            + `doors`
            + `connections`
            + `persons`
            + `cards`
    + `sort`(required, enum[string])
        Sorting order that will be appllied by the `log` entity's `occurred` field value. `desc` is used by default.
        + Members
            + `asc`
            + `desc`
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/reports?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/reports?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "id": 1,
                    "name": "Weekly Report",
                    "period": "lastWeek",
                    "event": ["door.input.cardread"]
                    "result": ["door.request.allowed", "door.request.allowed"],
                    "details": {
                        "doors": [1, 2, 3],
                        "connections": [12, 13],
                        "persons": [4, 56],
                        "cards": [8]
                    },
                    "sort": "asc"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Reports [/reports]

+ Model

    + `name` (required, string) ... Report name.
    + `period` (required, enum[string])
        Period type.
        + Members
            + `today`
            + `yesterday`
            + `thisWeek`
            + `thisMonth`
            + `lastWeek`
            + `lastMonth`
            + `custom`
    + `startDate` (optional, string) ... Lower date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + `stopDate` (optional, string) ... Upper date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + `event` (optional, array[enum[string]])
        Event types list. `null` value should be passed to avoid filtering by events.
        + Members
            + `door.autoopen.on`
            + `door.autoopen.off`
            + `door.input.cardread`
            + `door.input.dps.open`
            + `door.input.dps.close`
            + `door.input.rex.on`
            + `door.input.rex.off`
            + `door.alarm.propped.on`
            + `door.alarm.propped.off`
            + `door.alarm.propped.alloff`
            + `door.alarm.forced`
            + `endpoint.alarm.comloss.on`
            + `endpoint.alarm.comloss.off`
            + `door.request.duress`
            + `door.request.anyduress`
            + `door.request.found`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
    + `result` (optional, array[enum[string]])
        Result types list. `null` value should be passed to avoid filtering by results.
        + Members
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
            + `action.send.email`
            + `action.do.not.disturb`
            + `action.force.toggle`
            + `action.force.open`
            + `action.force.close`
            + `action.open`
            + `action.close`
            + `action.lockdown.on`
            + `action.lockdown.off`
            + `action.delay.open`
            + `action.delay.close`
            + `action.open.close`
    + `details` (required, object)
        List of entites types to perform the filtering.
        + Members
            + `doors`
            + `connections`
            + `persons`
            + `cards`
            + `groups`
    + `sort`(optional, enum[string])
        Sorting order that will be appllied by the `log` entity's `occurred` field value. `desc` by default.
        + Members
            + `asc`
            + `desc`
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/connections?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/connections?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "name": "Weekly Report",
                    "period": "custom",
                    "startDate": "2016-05-16",
                    "stopDate": "2016-05-22",
                    "event": ["door.input.cardread"]
                    "result": ["door.request.allowed", "action.delay.close"],
                    "details": {
                        "doors": [1, 2, 3],
                        "connections": [12, 13],
                        "persons": [4, 56],
                        "cards": [8]
                    },
                    "sort": "asc"
            }

### Retrieve a Report [GET /reports/{report_id}]

+ Parameters

    + report_id (required, number) ... Numeric `id` of the Report to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Report id.
    + `name` (required, string) ... Report name.
    + `period` (required, enum[string])
        Period type.
        + Members
            + `today`
            + `yesterday`
            + `thisWeek`
            + `thisMonth`
            + `lastWeek`
            + `lastMonth`
            + `custom`
    + `startDate` (optional, string) ... Lower date bound in `YYYY-MM-DD` format for log filtering. Presents in the response only when `period` equals `custom`.
    + `stopDate` (optional, string) ... Upper date bound in `YYYY-MM-DD` format for log filtering. Presents in the response only when `period` equals `custom`.
    + `event` (required, array[enum[string]])
        Event types list. `null` value indicates that no events filter was set.
        + Members
            + `null`
            + `door.autoopen.on`
            + `door.autoopen.off`
            + `door.input.cardread`
            + `door.input.dps.open`
            + `door.input.dps.close`
            + `door.input.rex.on`
            + `door.input.rex.off`
            + `door.alarm.propped.on`
            + `door.alarm.propped.off`
            + `door.alarm.propped.alloff`
            + `door.alarm.forced`
            + `endpoint.alarm.comloss.on`
            + `endpoint.alarm.comloss.off`
            + `door.request.duress`
            + `door.request.anyduress`
            + `door.request.found`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
    + `result` (required, array[enum[string]])
        Result types list. `null` value indicates that no results filter was set.
        + Members
            + `null`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
            + `action.send.email`
            + `action.do.not.disturb`
            + `action.force.toggle`
            + `action.force.open`
            + `action.force.close`
            + `action.open`
            + `action.close`
            + `action.lockdown.on`
            + `action.lockdown.off`
            + `action.delay.open`
            + `action.delay.close`
            + `action.open.close`
    + `details` (required, object)
        List of entites types to perform the filtering. `null` is returned if no report has no details.
        + Members
            + `doors`
            + `connections`
            + `persons`
            + `cards`
            + `groups`
    + `sort`(required, enum[string])
        Sorting order that will be appllied by the `log` entity's `occurred` field value. `desc` will be used by default. `null` value means to use default value.
        + Members
            + `asc`
            + `desc`
        
    + Body
    
            {
                    "id": 1,
                    "name": "Weekly Report",
                    "period": "custom",
                    "startDate": "2016-05-16",
                    "stopDate": "2016-05-22",
                    "event": ["door.input.cardread"]
                    "result": ["door.request.allowed", "action.open.close"],
                    "details": {
                        "doors": [1, 2, 3],
                        "connections": [12, 13],
                        "persons": [4, 56],
                        "cards": [8]
                    },
                    "sort": "asc"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Report [POST]

+ Request (application/json)

    [Reports][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Report.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Report [PUT /reports/{report_id}]

+ Request (application/json)

    + `id` (required, number) ... Number `id` of Report to be updated.
    + `name` (required, string) ... Report name.
    + `period` (required, enum[string])
        Period type.
        + Members
            + `today`
            + `yesterday`
            + `thisWeek`
            + `thisMonth`
            + `lastWeek`
            + `lastMonth`
            + `custom`
    + `startDate` (optional, string) ... Lower date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + `stopDate` (optional, string) ... Upper date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + `event` (required, array[enum[string]])
        Event types list. Pass `null` value to avoid filtering by event.
        + Members
            + `door.autoopen.on`
            + `door.autoopen.off`
            + `door.input.cardread`
            + `door.input.dps.open`
            + `door.input.dps.close`
            + `door.input.rex.on`
            + `door.input.rex.off`
            + `door.alarm.propped.on`
            + `door.alarm.propped.off`
            + `door.alarm.propped.alloff`
            + `door.alarm.forced`
            + `endpoint.alarm.comloss.on`
            + `endpoint.alarm.comloss.off`
            + `door.request.duress`
            + `door.request.anyduress`
            + `door.request.found`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
    + `result` (required, array[enum[string]])
        Result types list. Pass `null` value to avoid filtering by event.
        + Members
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
            + `action.send.email`
            + `action.do.not.disturb`
            + `action.force.toggle`
            + `action.force.open`
            + `action.force.close`
            + `action.open`
            + `action.close`
            + `action.lockdown.on`
            + `action.lockdown.off`
            + `action.delay.open`
            + `action.delay.close`
            + `action.open.close`
    + `details` (required, object)
        List of entites types to perform the filtering. `null` could be passed if no filtering by details should be performed.
        + Members
            + `doors`
            + `connections`
            + `persons`
            + `cards`
            + `groups`
    + `sort`(required, enum[string])
        Sorting order that will be appllied by the `log` entity's `occurred` field value. `desc` by default.
        + Members
            + `asc`
            + `desc`
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/connections?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/connections?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "name": "Weekly Report",
                    "period": "custom",
                    "startDate": "2016-05-16",
                    "stopDate": "2016-05-22",
                    "event": ["door.input.cardread"]
                    "result": ["door.request.allowed", "action.force.close"],
                    "details": {
                        "doors": [1, 2, 3],
                        "connections": [12, 13],
                        "persons": [4, 56],
                        "cards": [8]
                    },
                    "sort": "asc"
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Report [DELETE /reports/{report_id}]

+ Parameters

    + report_id (required, number) ... Numeric `id` of the Report to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

# Group Filter Audit Log Entries By Report

The functionality is available for all roles.
Details for any Role should contain only entities that User has access to.
Details for Reporters and Managers can contain only entities that they have access to according Role and Partition restrictions.

### Get audit log entries list filtered by report [GET /reports/generate?page={page}&per_page={per_page}&sort={sort_order}&period={period}&start_date={startDate}&stop_date={stopDate}&event={event}&result={result}&details={details}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Log entries are sorted by `occurred` timestamp.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`
    + period (required, enum[string])
        Period type.
        + Members
            + `today`
            + `yesterday`
            + `thisWeek`
            + `thisMonth`
            + `lastWeek`
            + `lastMonth`
            + `custom`
    + startDate (optional, string) ... Lower date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + stopDate (optional, string) ... Upper date bound in `YYYY-MM-DD` format for log filtering. Should present only if `period` equals `custom`.
    + event (optional, array[enum[string]])
        Event types list. Could be skipped to avoid filtering by events.
        + Members
            + `door.autoopen.on`
            + `door.autoopen.off`
            + `door.input.cardread`
            + `door.input.dps.open`
            + `door.input.dps.close`
            + `door.input.rex.on`
            + `door.input.rex.off`
            + `door.alarm.propped.on`
            + `door.alarm.propped.off`
            + `door.alarm.propped.alloff`
            + `door.alarm.forced`
            + `endpoint.alarm.comloss.on`
            + `endpoint.alarm.comloss.off`
            + `door.request.duress`
            + `door.request.anyduress`
            + `door.request.found`
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
    + result (optional, array[enum[string]])
        Result types list. Could be skipped to avoid filtering by result.
        + Members
            + `door.request.unknown`
            + `door.request.denied`
            + `door.request.multiallowed`
            + `door.request.allowed`
            + `action.send.email`
            + `action.do.not.disturb`
            + `action.force.toggle`
            + `action.force.open`
            + `action.force.close`
            + `action.open`
            + `action.close`
            + `action.lockdown.on`
            + `action.lockdown.off`
            + `action.delay.open`
            + `action.delay.close`
            + `action.open.close`
    + details (optional, object)
        List of entites types and ids that should be shown. Could be skipped.
        + Members
            + `doors`
            + `connections`
            + `persons`
            + `cards`
            + `groups`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `array`
        + `object`
            + `id` (required, number) ... Log entry id.
            + `info` (required, string) ... Time when event has occurred.
            + `occurred` (required, string) ... Event happened time in `YYYY-MM-DD HH24:MM:SS` format.
            + `event` (required, object)
                + `id` (string) ... Event identificator.
                + `name` (string) ... Event name.
            + `result` (required, object)
                + `id` (string) ... Result identificator.
                + `name` (string) ... Result name.
            + `logDetails` (required, object) Object contains list of entities names connected with event.
                + `doorName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Door name.
                + `connectionName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Connection name.
                + `personName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Person name.
                + `ruleName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Rule name.
                + `cardNumber` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Card number.
                + `groupName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Group name.
                + `elevatorName` (optional, object)
                    + `name` (string) ... Internationalized column name.
                    + `value` (string) ... Floor Group name.

    + Headers
    
            Link: <https://pdk.io/api/reports?page=1&per_page=10>; rel="next", <https://pdk.io/api/reports?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "id": 1,
                    "name": "Weekly Report",
                    "period": "lastWeek",
                    "event": "door.input.cardread"
                    "result": "door.request.allowed",
                    "details": {
                        "doors": [1, 2, 3],
                        "connections": [12, 13],
                        "persons": [4, 56],
                        "cards": [8]
                    },
                    "sort": "asc"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

# Group Partitions

#### A Partitions entity represents a filter for Person, Group, Floor Group and Device entities.
Partitions could be managed by [Sysop, Integrator, Admin] roles. Furthermore, listed roles can set Partition for entities that they have access to. In addition, there is a Default partition that could not be removed.

Person, Group, Floor Group and Device entities can not have no partition. Device can belong to several partitions at the same time.

Person's, Group's, Floor Group's and Device's partition is set to the User's partition during creation if another has not been passed. Listed above roles can change entity's partition during PUT query. To set Device's partition `partitions/devices` endpoint should be used.

If Device is bound to one Partition only and someone removes this Device from that Partition, Device will be transferred to the Default Partition. So Device should be bound to at least one Partition in time.

If User accesses the Panel and he is not bound to any Partition yet, his actions will be perceived as he is in the Default partition untill he will be explicitly bound to some other partition.

### Retrieve Partitions Collection [GET /partitions?page={page}&per_page={per_page}&sort={sort_order}]

+ Parameters

    + page (optional, number)
        Number of page to return, started from `0`.
    + per_page (optional, number)
        Count of items per page. An integer from `1` to `100`.
    + sort (optional, enum[string])
        Sorting order. Report are sorted by `name` values.
        + Default: `asc`
        + Members
            + `asc`
            + `desc`

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Report id.
    + `name` (required, string) ... Report name.
    + `users` (optional, array[string]) ... List of userIds, bound to the Partition.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/partitions?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/partitions?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "id": 1,
                    "name": "Main hall",
                    "users": ["132a1c14b321e43123"]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)

## Partitions [/partitions/{partition_id}]

+ Model

    + `name` (required, string) ... Report name.
    + `users` (optional, array[string]) ... List of userIds, bound to the Partition. Should not be passed if no Users should be set to this Partition.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/partitions?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/partitions?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "name": "Mail hall",
                    "users": ["132a1c14b321e43123"]
            }

### Retrieve a Partition [GET]

+ Parameters

    + partition_id (required, number) ... Numeric `id` of the Report to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Report id.
    + `name` (required, string) ... Report name.
    + `users` (optional, array[string]) ... List of userIds, bound to the Partition.
        
    + Body
    
            {
                    "id": 1,
                    "name": "Mail hall",
                    "users": ["132a1c14b321e43123"]
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Create a Partition [POST /partitions]

+ Request (application/json)

    [Reports][]

+ Response 200 (application/json)

    + `id` (required, number) ... Number `id` of created Partition.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Update a Partition [PUT]

+ Request (application/json)

    + `name` (required, string) ... Report name.
    + `users` (optional, array[string]) ... List of userIds, bound to the Partition. `null` should be passed to unset Users from Partition.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/partitions?page=1&per_page=10>; rel="next", <https://panel-id.pdk.io/api/partitions?page=2&per_page=10>; rel="last"
            X-Total-Count: 11
    
    + Body
    
            {
                    "name": "Mail hall",
                    "users": ["132a1c14b321e43123"]
            }

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)

### Delete a Partition [DELETE]

+ Parameters

    + partition_id (required, number) ... Numeric `id` of the Partition to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)