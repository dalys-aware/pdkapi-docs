FORMAT: 1A
HOST: https://panel-id.pdk.io/api

# PDK Panel API

The PDK Panel API provides for programmatic access to CRUD operations on entities and a realtime event stream from the PDK Access Control system.

The API conforms to many of the tenets of the REST style architecture and fully embraces the HTTP standard to fulfill many of these.

* Stateless
* Cacheable
* A URL identifies a Resource
* Operations conveyed implicitly through HTTP verbs

This drives certain uniform architectural attributes of the API.

# Authentication

Authenticating to this stateless API is handled by including an HTTP Authentication header in each request.
Before making any requests to the panel's API andpoint you will need a Bearer token.
This token represents your application's permission to access the API as delegated by the user.

For instructions on retrieving a token for communicating with a panel's API, see the [Auth Server API documentation](http://docs.pdkauthapi.apiary.io/).

Because the API is stateless, this Bearer token must be included in every request to the API.
The Authorization header MUST be of the following format:

`Authorization: Bearer {token-value}` 


# Resource Operations

Standard CRUD operations on resources are performed using HTTP verbs.

* GET - Retrieve a resource, never modifies data
* POST - Create a resource or perform other non-data operations (e.g. trigger a system event)
* PUT - Update a resource
* DELETE - Delete a resource

# Cache Headers

The current state of a resource is identified by standard HTTP caching mechanisms in the response to a requested resource (e.g. ETag, Last-Modified, cache-control).
These headers can be used for change detection and intermediate caching. Standard HTTP caching rules are adhered to by the API server, for example .

# URI Format

Resource URIs will generally follow a format similar to those shown below.

* Resource Collection - `https://panel-id.pdk.io/api/{resource-name}`
* Specific Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}`
* Related Resource Collection - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}`
* Specific Related Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}/{id}`

# Content type

Content type is set to `application/json` for all API calls

# Response Codes

## HTTP Codes
* `200` - OK status with JSON body
* `204` - OK status without body
* `400` - Bad Request
* `401` - Unauthorized
* `403` - Forbidden
* `404` - Not Found
* `422` - Unprocessable Entity
* `500` - Internal Server Error

## Error message format

    {
        "code" : "106",
        "message" : "Entity already exists"    
    }

## Error Codes
* `100` - Unprocessible request
* `101` - Unauthorized
* `102` - Access denied
* `103` - Resourse not found
* `104` - Unexpected Server error
* `106` - Entity already exists

# Roles
Roles permissions have hierarchical structure. List of possible roles given below:
* `Reporter` has read only access for Persons, Groups entities.
* `Manager` in addition to `Reporter` permissions has write access for Persons and Groups entities.
* `Admin` in addition to `Manager` permissions has write access for Persons, Groups, System Events, Auto Open Rules, Floor Groups entities.
* `Integrator` in addition to `Admin` permissions can change hardware configuration on certain board.
* `Sysop` in addition to `Admin` permissions can change hardware configuration.

# Group Search

### Global Search [GET /search?page={page}&per_page={per_page}&sort={sort_order}&q={query_string}]
+ Parameters

    + query_string (optional, string) ... Url-encoded query string.
    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of entity.
    + `type` (required, number) ... Type of entity. Could be one of `person`, `group`, `floorGroup`, `partitions`.
    + `name` (required, string) ... Entity name or description.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/search?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
    
    + Body
    
            {
                "id": 10,
                "type": "person",
                "name": "Ted Froëdington"
            }

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 500 (application/json)

# Group Partitions

## TODO Here will be partitions endpoint description

# Group Persons
A person entity represents the attributes of a person that will be interacting with the access control system.
These attributes include the person's name, a list of their credentials, rules that apply to them, and a list of group memberships, among others. 

## Persons Collection [/persons?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Admin, Manager, Reporter] roles.
+ Model

    + Body
    
            {
                "code" : "106",
                "message" : "Entity already exists"    
            }
        
### Retrieve all Persons [GET /persons?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Person's id.
    + `name` (required, string) ...  Person's name.
    + `enabled` (optional, boolean) ... Person's account mode. True by default.
    + `activeDate` (optional, string) ...  Person's account active date in JavaScript built-in format. Null by default. 
    + `expDate` (optional, string) ... Person's account expiration date in JavaScript built-in format. Null by default.
    + `imageUrl` (optional, string) ... Person's account image URL. Null by default.
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
    
    + Body
    
            [
                {
                    "id": 10,
                    "name": "Ted Froëdington",
                    "enabled": true,
                    "activeDate": "2016-03-23T18:25:43.511Z",
                    "expDate": "2016-04-23T18:25:43.511Z",
                    "imageUrl": "/usersImages/32224"
                }
            ]
+ Response 401 (application/json)
+ Response 500 (application/json)
        
## Person [/persons/{person_id}]

The functionality is available for [Admin, Manager] roles. Retrieving a Person is also available for the [Reporter] role.

+ Model

    + `person_id` (required, number) ... Person's id.
    + `name` (required, string) ...  Person's name.
    + `enabled` (optional, boolean) ... Person's account mode. True by default.
    + `activeDate` (optional, string) ...  Person's account active date in JavaScript built-in format. Null by default. 
    + `expDate` (optional, string) ... Person's account expiration date in JavaScript built-in format. Null by default.
    + `imageUrl` (optional, string) ... Person's account image URL. Null by default.
    
    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "name": "Ted Froëdington",
                "enabled": true,
                "activeDate": "2016-03-23T18:25:43.511Z",
                "expDate": "2016-04-23T18:25:43.511Z",
                "imageUrl":"/usersImages/32224"
            }

### Retrieve a Person [GET]
+ Parameters

    + person_id (required, string, `1`) ... Numeric `id` of the Person to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `name` (required, string) ...  Person's name.
    + `enabled` (optional, boolean) ... Person's account mode. True by default.
    + `activeDate` (optional, string) ...  Person's account active date in JavaScript built-in format. Null by default. 
    + `expDate` (optional, string) ... Person's account expiration date in JavaScript built-in format. Null by default.
    + `imageUrl` (optional, string) ... Person's account image URL. Null by default.
    
    + Body
    
            {
                "name": "Ted Froëdington",
                "enabled": true,
                "activeDate": "2016-03-23T18:25:43.511Z",
                "expDate": "2016-04-23T18:25:43.511Z",
                "imageUrl":"/usersImages/32224"
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

### Create a Person [POST /persons]

+ Request (application/json)

    [Person][]

            
+ Response 200 (application/json)

    + `id` (required, number) ... Id of created entity.
    
    + Body
    
            {
                "id": 1
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 422 (application/json)

    [Persons Collection][]
            
+ Response 500 (application/json)

### Update a Person [PUT]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    + `name` (required, string) ...  Person's name.
    + `enabled` (required, boolean) ... Person's account mode. True by default.
    + `activeDate` (required, string) ...  Person's account active date in JavaScript built-in format. Null by default. 
    + `expDate` (required, string) ... Person's account expiration date in JavaScript built-in format. Null by default.
    + `imageUrl` (required, string) ... Person's account image URL. Null by default.
    
    + Headers
    
            Authorization: Bearer {token}

    + Body
    
            {
                "name": "Ted Froëdington",
                "enabled": true,
                "activeDate": "2016-03-23T18:25:43.511Z",
                "expDate": "2016-04-23T18:25:43.511Z",
                "imageUrl":"/usersImages/32224"
            }
            
+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 422 (application/json)

    [Persons Collection][]

+ Response 500 (application/json)

### Delete a Person [DELETE]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.

+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

## Person Card [/persons/{person_id}/cards]

The functionality is available for [Admin, Manager] roles.  Retrieving Cards is also available for the [Reporter] role.

+ Model

    + `description` (optional, string) ... Card description (max length 255).
    + `cardNumber` (required, number) ... Card number. 
    
    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "description": "Card description",
                "cardNumber": "123"
            }

### Retrieve all Cards [GET /persons/{person_id}/cards?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `id` (required, number, `1`) ... Numeric `id` of the Card.
    + `description` (optional, string) ... Card description (max length 255).
    + `cardNumber` (required, number) ... Card number. 

    + Headers
    
            Link: <https://panel-id.pdk.io/api/cards?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
    
    + Body
    
            [
                {
                    "id": 1,
                    "description": "myCard",
                    "cardNumber":"12321"
                }
            ]

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

### Retrieve a Card [GET /persons/{person_id}/cards/{card_id}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + `description` (optional, string) ... Card description (max length 255).
    + `cardNumber` (required, number) ... Card number. 
    
    + Body
    
            {
                "description": "Card description",
                "cardNumber": "123"
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

### Create a Card [POST]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Card][]

+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

### Delete a Card [DELETE /persons/{person_id}/card/{card_id}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

## Person Rules Collection [/persons/{person_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]

#### List of access rules, event rules and elevator rules that apply to this Person.

The functionality is available for [Admin, Manager, Reporter] roles.

### Retrieve Rules Collection for a Person [GET]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, nubmer) ... Numeric rule `id`.
        + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array) ... Days of week when a rule should be performed. 
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `action` (required, string) ... Operation that should be performed. Could be one of `sendEmail`, `doNotDisturb`, `forceToggle`, `forceOpen`, `forceClose`, `open`, `close`, `lockdownOn`, `lockdownOff`, `delatOpen`, `delayClose` or `open/close` values.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types only.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.
        
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/231453/rules?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 3
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "When allowed",
                    "action": "Delay Open",
                    "delay": "0:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1
                        }
                    ],
                    "targetDoors": [
                        {
                            "id": 2
                        }
                    ]
                }
            ]

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Person Rules  [/persons/{person_id}/rules]
The functionality is available for [Admin, Manager] roles. Retrieving a Rule is also available for the [Reporter] role.

+ Model

    + Common parameters for all rule types
        + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array) ... Days of week when a rule should be performed. 
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.
        
    + Headers
    
            Authorization: Bearer {token}    
            
    + Body
    
    
            {
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [
                    {
                        "id": 1
                    }
                ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132
                    }
                ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "When allowed",
                "action": "Delay Open",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1
                    }
                ],
                "targetDoors": [
                    {
                        "id": 2
                    }
                ]
            }

### Retrieve a Rule for a Person  [GET /persons/{person_id}/rules/{rule_id}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array) ... Days of week when a rule should be performed. 
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.
            
    + Body
    
    
            {
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [
                    {
                        "id": 1
                    }
                ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132
                    }
                ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "When allowed",
                "action": "Delay Open",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1
                    }
                ],
                "targetDoors": [
                    {
                        "id": 2
                    }
                ]
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add a Rule for a Person  [POST /persons/{person_id}/rules]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update a Rule for a Person [PUT /persons/{person_id}/rules/{rule_id}]

+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Delete a Rule for a Person [DELETE /persons/{person_id}/rules/{rule_id}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Person Groups [/persons/{person_id}/groups]
The functionality is available for [Admin, Manager] roles. [Reporter] role has access for retrieving operations only.
### Retrieve all Groups for a Person [GET /persons/{person_id}/groups?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons/32143/groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1

    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 500 (application/json)

### Retrieve a Group for a Person  [GET /persons/{person_id}/groups/{group_id}]
+ Parameters

    + person_id (required, number, `1`) ... Numeric `id` of the Person to perform the action on.
    + group_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
            
+ Response 200 (application/json)

    + Body
    
            {
                "name": "group1"
            }
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add a Group for a Person [POST /persons/{person_id}/groups]
+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
        
            {
                "id": 1
            }
            
+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)

### Remove a Person from a Group [DELETE /persons/{person_id}/groups/{group_id}]
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 204

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)    

# Group Images
Service that accepts images in base64 fromat and returns relative path to it.
## Person Image [/image]
The functionality is available for [Admin, Manager] roles.  

### Retrieve image URL [POST]

+ Request (multipart/form-data)

+ Response 200 (application/json)

    + `imageUrl` (required, string) ... Relative URL to Person's image.
    
    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "imageUrl": "/usersImage/143215"
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)

# Group Groups
A group entity represents a set of shared rules that apply to people that are members of the group.

## Groups Collection [/groups?page={page}&per_page={per_page}&sort={sort_order}]
The functionality is available for [Admin, Manager, Reporter] roles.
### Retrieve All Groups [GET]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
            
    + Body
    
            [
                {
                    "id": 1,
                    "name": "group1"
                }
            ]

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 500 (application/json)

## Group [/groups/{group_id}]
The functionality is available for [Admin, Manager] roles. Retrieving a Group is also available for the [Reporter] role.
+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.

+ Model 

    + `name` (required, string) Group name
    
    + Headers
    
            Authorization: Bearer {token}
            
    + Body
    
            {
                "name": "group1"
            }

### Retrieve a Group [GET]

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `name` (required, string) ...  Group name.

    + Body
    
            {
                "name": "group1"
            }

+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Create a Group [POST /groups]

+ Request (application/json)

    [Group][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 422 (application/json)

    [Persons Collection][]
            
+ Response 500 (application/json)

### Update a Group [PUT]

+ Request (application/json)

    [Group][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 422 (application/json)

    [Persons Collection][]
            
+ Response 500 (application/json)


### Delete a Group [DELETE]

+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Group Rules Collection [/groups/{group_id}/rules?page={page}&per_page={per_page}&sort={sort_order}]
#### List of access rules, event rules and elevator rules that apply to this Group.
The functionality is available for [Admin, Manager, Reporter] roles.

### Retrieve Rules Collection for a Group [GET]
+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.
    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `id` (required, string) ... Numeric rule `id`.
        + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array) ... Days of week when a rule should be performed. 
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/groups/432332/rules?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 3
        
    + Body
    
            [
                {
                    "type": "door",
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1
                        }
                    ]
                },
                {
                    "type": "elevator",
                    "id": 2,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "floorGroups": [
                        {
                            "id": 1
                        }
                    ]
                },
                {
                    "type": "event",
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "When allowed",
                    "action": "Delay Open",
                    "delay": "0:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1
                        }
                    ],
                    "targetDoors": [
                        {
                            "id": 2
                        }
                    ]
                }
            ]
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Group Rules [/groups/{group_id}/rules]

The functionality is available for [Admin, Manager] roles. Retrieving a Rule is also available for the [Reporter] role.

### Retrieve a Rule for a Group  [GET /groups/{group_id}/rules/{rule_id}]
+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Common parameters for all rule types
        + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
        + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
        + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
        + `recurring` (optional, array) ... Days of week when a rule should be performed. 
        + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + Specific `door` rule type fields
        + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
        + `doors` (required, array) ... Doors on which rule should be performed.
    + Specific `elevator` rule type fields
        + `floorGroups` (required, array) ... Floor Groups on which rule should be performed.
    + Specific `event` rule type fields
        + `name` (required, string) ... Rule name.
        + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
        + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
        + `sourceDoors` (required, array) ... List of doors considered as event source.
        + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.
        

    + Body
    
            {
                "type": "elevator",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "floorGroups": [
                    {
                        "id": 1
                    }
                ]
            }
            
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132
                    }
                ]
            }
            
            {
                "type": "event",
                "name": "MyEventRule",
                "triggerType": "When allowed",
                "action": "Delay Open",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1
                    }
                ],
                "targetDoors": [
                    {
                        "id": 2
                    }
                ]
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add Rule for a Group  [POST /groups/{group_id}/rules]

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.
    
+ Request (application/json)

    [Person Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created rule.

    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update a Rule for a Group [PUT /groups/{group_id}/rules/{rule_id}]

+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Person Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Delete a Rule for a Group [DELETE /groups/{group_id}/rules/{rule_id}]
+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Group to perform the action on.
    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group System Events

#### List of event rules that apply to system-wide events, which are events not generated by a known person.

## System Events Collection [/system_events?page={page}&per_page={per_page}&sort={sort_order}]

The functionality is available for [Admin, Manager, Reporter] roles.

### Retrieve System Events Collection [GET]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id`  (required, number) .. Numeric event `id`.
    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/system_events?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
    
    + Body
    
            [
                {
                    "id": 3,
                    "name": "MyEventRule",
                    "triggerType": "When allowed",
                    "action": "Delay Open",
                    "delay": "0:25:43",
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "sourceDoors": [
                        {
                            "id": 1
                        }
                    ],
                    "targetDoors": [
                        {
                            "id": 2
                        }
                    ]
                }
            ]

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 500 (application/json)

## System Events [/system_events]

The functionality is available for [Admin] roles. Retrieving a System Event is also available for the [Manager, Reporter] roles.

+ Model

    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "name": "MyEventRule",
                "triggerType": "When allowed",
                "action": "Delay Open",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1
                    }
                ],
                "targetDoors": [
                    {
                        "id": 2
                    }
                ]
            }

### Retrieve a System Event Rule [GET /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `name` (required, string) ... Rule name.
    + `triggerType` (required, string) ... Type of event on which action should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `action` (required, string) ... Operation that should be performed. Could be one of `onDoorOpen`, `onDoorClose`, `onDoorPropped`, `onDoorForced`, `onPropCleared`, `allPropCleared`, `onRexOpen`, `onRexClose`, `onCardSwipe` or `onCardNotFound` values.
    + `delay` (optional, string) ... Delay for `action` performing in `HH:MM:SS` format. This field used with `delayOpen`, `delayClose`, `openClose` action types.
    + `sourceDoors` (required, array) ... List of doors considered as event source.
    + `targetDoors` (required, array) ... List of doors which action should be performed on. Target doors list can be equal to source doors list.
    
    + Body
    
            {
                "name": "MyEventRule",
                "triggerType": "When allowed",
                "action": "Delay Open",
                "delay": "0:25:43",
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "sourceDoors": [
                    {
                        "id": 1
                    }
                ],
                "targetDoors": [
                    {
                        "id": 2
                    }
                ]
            }
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add a System Event Rule  [POST /system_events]

+ Request (application/json)

    [System Events][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created event rule.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update a System Event Rule [PUT /system_events/{rule_id}]

+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [System Events][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Delete a System Event Rule [DELETE /system_events/{rule_id}]
+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Auto Open
#### List of access rules that represent the times that doors should be propped open.

## Auto Open Rules Collection [/auto_open?page={page}&per_page={per_page}&sort={sort_order}]
The functionality is available for [Admin, Manager, Reporter] roles.
### Retrieve Auto Open Rules Collection [GET]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric `id` of a rule.
    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/auto_open?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
            
    + Body
    
            [
                {
                    "id": 1,
                    "allow": true,
                    "startTime": "12:00",
                    "stopTime": "23:00",
                    "recurring": [
                        "Monday",
                        "Tuesday"
                    ],
                    "singleDate": "2016-02-23",
                    "doors": [
                        {
                            "id": 1
                        }
                    ]
                }
            ]
            
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 500 (application/json)

## Auto Open Rules [/auto_open]
The functionality is available for [Admin] roles. Retrieving a Auto Open Rule is also available for the [Manager, Reporter] roles.

+ Model

    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.

    + Headers
    
            Authorization: Bearer {token}
    
    + Body
    
            {
                "type": "door",
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 132
                    }
                ]
            }
            
### Retrieve an Auto Open Rule [GET /auto_open/{rule_id}]
+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Auto Open Rule to perform the action on.

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `type` (required, string) ... Type of a given rule. Values could be `door`, `elevator`, `event`.
    + `startTime` (required, string) ... Time when a rule performing should be enabled in `HH:MM` format.
    + `stopTime` (required, string) ... Time when a rule performing should be disabled in `HH:MM` format.
    + `recurring` (optional, array) ... Days of week when a rule should be performed. 
    + `singleDate` (optional, string) ... Date when a rule should be performed in `YYYY-MM-DD` format. Only one field can be in the JSON at the same time `recurring` or `singleDate`.
    + `allow` (required, boolean) ... Flag which indicates if access granted or denied.
    + `doors` (required, array) ... Doors on which rule should be performed.
            
    + Body
    
            {
                "allow": true,
                "startTime": "12:00",
                "stopTime": "23:00",
                "recurring": [
                    "Monday",
                    "Tuesday"
                ],
                "singleDate": "2016-02-23",
                "doors": [
                    {
                        "id": 1
                    }
                ]
            }

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add an Auto Open Rule  [POST]

+ Request (application/json)

    [Auto Open Rules][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created rule.

    + Body
    
            {
                "id": "1"
            }
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update an Auto Open Rule [PUT /auto_open/{rule_id}]

+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.

+ Request (application/json)

    [Auto Open Rules][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Delete an Auto Open Rule [DELETE /auto_open/{rule_id}]
+ Parameters

    + rule_id (required, number, `1`) ... Numeric `id` of the Rule to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Floor Groups
#### Associates a reader input and a group of floor outputs. This group is then referenced from an elevator rule on a person or group to activate all the floor buttons in the elevator car where input reader is installed.
## Floor Groups Collection [/floor_groups?page={page}&per_page={per_page}&sort={sort_order}]
The functionality is available for [Admin] roles.
### Retrieve Floor Groups Collection [GET]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Numeric group `id`.
    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array) ... List of doors `id`'s in current Floor Group.

    + Headers
    
            Link: <https://panel-id.pdk.io/api/floor_groups?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
        
    + Body
    
            [
                {
                    "id": 1,
                    "name": "FloorGroup1",
                    "readerPort": 1,
                    "floors": [
                        {
                            "id": 1
                        }
                    ]
                }
            ]
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 500 (application/json)

## Floor Groups [/floor_groups]
The functionality is available for [Admin] roles.

+ Model

    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array) ... List of doors `id`'s in current Floor Group.
    
    + Headers
    
            Authorization: Bearer {token}
        
    + Body
    
            {
                "name": "FloorGroup1",
                "readerPort": 1,
                "floors": [
                    {
                        "id": 1
                    }
                ]
            }


### Retrieve a Floor Group [GET /floor_groups/{group_id}]
+ Parameters

    + group_id (required, string, `1`) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `name` (required, string) ... Floor Group name.
    + `readerPort` (required, number) ... Reader device `id`.
    + `floors` (required, array) ... List of doors `id`'s in current Floor Group.
        
    + Body
    
            {
                "name": "FloorGroup1",
                "readerPort": 1,
                "floors": [
                    {
                        "id": 1
                    }
                ]
            }

+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Add a Floor Group  [POST]

+ Request (application/json)

    [Floor Groups][]

+ Response 200 (application/json)

    + `id` (required, number) ... Id of created Floor Group.
    
    + Body
    
            {
                "id": 1
            }
            
+ Response 400 (application/json)            
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update a Floor Group [PUT /floor_groups/{group_id}]

+ Parameters

    + group_id (required, string, `1`) ... Numeric `id` of the Floor Group to perform the action on.

+ Request (application/json)

    [Floor Groups][]

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Delete a Floor Group [DELETE /floor_groups/{group_id}]
+ Parameters

    + group_id (required, number, `1`) ... Numeric `id` of the Floor Group to perform the action on.
    
+ Request

    + Headers
    
            Authorization: Bearer {token}

+ Response 204
+ Response 400 (application/json)
+ Response 401 (application/json)
+ Response 403 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Devices

## TODO Here will be devices endpoint description

### Retrieve all Devices [GET /devices?page={page}&per_page={per_page}&sort={sort_order}]
+ Parameters

    + page (optional, number, `0`) ... Number of page (`0` by default).
    + per_page (optional, number, `10`) ... Count of items per page (`10` by default).
    + sort_order (optional, string, `asc`) ... Sorting order. Can be `asc` or `desc` (`asc` by default).

+ Request

    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)

    + `id` (required, number) ... Device id.
    + `description` (required, string) ...  Device name.
    + `connection` (required, number) ... Connection type id.
    + `port` (required, number) ... Board port number.
    + `ca64` (required, string) ... Wireless address.
    + `relay` (required, boolean) ... Flag indicates if this device is a high-power relay.
    + `dps` (required, boolean) ... Flag indicates if door Open/Close events shoul be logged.
    + `propAlarm` (required, boolean) ... Enables alarm if a door left open more then `propDelay` seconds.
    + `propDelay` (required, number) ... Amount of time before PropAlarm is triggered.
    + `rex` (required, boolean) ... Enables loggin of user's request to leave from secured side of the door.
    + `forcedAlarm` (required, boolean) ... Flag indicates enabling Forced Alarm when the door is opened without Rex being triggered or a card read at the door.
    + `useCam` (required, boolean) ... Flag indicates if camera integration is enabled.
    + `camUrl` (required, string) ... URL of an IP camera .
    
    + Headers
    
            Link: <https://panel-id.pdk.io/api/persons?page=1&per_page=10>; rel="next", <https://accounts.pdk.io/panels?page=2&per_page=10>; rel="last"
            X-Total-Count: 1
    
    + Body
    
            [
                {
                    "id": 10,
                    "description": "Ted Froëdington",
                    "connection": 1,
                    "port": 1,
                    "ca64": "0013A200400A393B",
                    "relay": true,
                    "dps": true,
                    "propAlarm": true,
                    "propDelay": 30,
                    "rex": true,
                    "forcedAlarm": true,
                    "useCam": true,
                    "camUrl": "http://USERNAME:PASSWORD@IPADDRESS:PORT/camera"
                }
            ]

+ Response 401 (application/json)
+ Response 403 (application/json)            
+ Response 500 (application/json)

# Group Connections

## TODO Here will be connections endpoint description

# Group Wireless

## TODO Here will be wireless endpoint description

# Group Config

## TODO Here will be config endpoint description

# Group Websocket

## TODO Here will be websocket commands description