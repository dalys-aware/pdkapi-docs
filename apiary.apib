FORMAT: 1A
HOST: https://panel-id.pdk.io/api

# PDK Panel API
The PDK Panel API provides for programmatic access to CRUD operations on entities and a realtime event stream from the PDK Access Control system.

The API conforms to many of the tenets of the REST style architecture and fully embraces the HTTP standard to fulfill many of these.

* Stateless
* Cacheable
* A URL identifies a Resource
* Operations conveyed implicitly through HTTP verbs

This drives certain uniform architectural attributes of the API.

# Authentication

Authenticating to this stateless API is handled by including an HTTP Authentication header in each request.
Before making any requests to the panel's API andpoint you will need a Bearer token.
This token represents your application's permission to access the API as delegated by the user.

For instructions on retrieving a token for communicating with a panel's API, see the [Auth Server API documentation](http://docs.pdkauthapi.apiary.io/).

Because the API is stateless, this Bearer token must be included in every request to the API.
The Authorization header MUST be of the following format:

`Authorization: Bearer {token-value}` 


# Resource Operations

Standard CRUD operations on resources are performed using HTTP verbs.

* GET - Retrieve a resource, never modifies data
* POST - Create a resource or perform other non-data operations (e.g. trigger a system event)
* PUT - Update a resource
* DELETE - Delete a resource

# Cache Headers

The current state of a resource is identified by standard HTTP caching mechanisms in the response to a requested resource (e.g. ETag, Last-Modified, cache-control).
These headers can be used for change detection and intermediate caching. Standard HTTP caching rules are adhered to by the API server, for example .

# URI Format

Resource URIs will generally follow a format similar to those shown below.

* Resource Collection - `https://panel-id.pdk.io/api/{resource-name}`
* Specific Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}`
* Related Resource Collection - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}`
* Specific Related Resource - `https://panel-id.pdk.io/api/{resource-name}/{id}/{related-resource}/{id}`

# Collection Fields, Sorting, and Paging
The collection endpoints support a set of uniform query parameters that allow for selecting specific fields, setting the sort order, and paging through the result set.
## Fields

## Sorting

## Paging

# Group People
A person entity represents the attributes of a person that will be interacting with the access control system.
These attributes include the person's name, a list of their credentials, rules that apply to them, and a list of group memberships, among others. 

## Persons Collection [/persons?page={page}&per_page={per_page}]
### List all Persons [GET]
+ Request
    + Headers
    
            Authorization: Bearer {token}
    
+ Response 200 (application/json)
    + Headers

            Link: <https://panel-id.pdk.io/people?page=2&per_page=10>; rel="next", <https://panel-id.pdk.io/panels?page=3&per_page=10>; rel="last"
            X-Total-Count: 25

    + Body
    
            {
                "items":[
                            {
                                "id": "10",
                                "name": "Ted Froëdington"
                            }
                        ]
            }
+ Response 500 (application/json)

## Person [/persons/{id}]
Performes operations with a single person.
    
### Retrieve a Person [GET]
+ Parameters
    + id (required, string, `1`) ... Alphanumeric `id` of the Person to perform the action on.
    
+ Response 200 (application/json)
Successfull response.
    + Body
    
            {
                "id": "1",
                "name": "Ted Froëdington"
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)

### Create a Person [POST /persons]
+ Response 200 (application/json)
Successfull response. Response contains id of created entity.
    + Body
    
            {
                "id": "1",
            }

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 404 (application/json)

+ Response 422 (application/json)
Person with the same name has already been existed.
    + Body
    
            {
                "code": 106,
                "message": "Person with the same name has already been existed."
            }  

+ Response 500 (application/json)

### Update a Person [PUT]
+ Response 204

### Delete a Person [DELETE]
+ Response 204

## Person Image [/people/{id}/image]
A Person's profile image. For ease of use in `src` elements, the authentication token can be passed in the query string as `access_token`.
+ Parameters
    + id (required, string, `1`) ... Alphanumeric `id` of the Person to retrieve the image for.

### Retrieve the Image [GET]
+ Response 200 (image/jpeg)

# Group Groups
A group entity represents a set of shared rules that apply to people that are members of the group.

## Groups Collection [/groups]
### List all Groups [GET]
+ Request
    + Headers
    
            Authorization: Bearer {token}
        
+ Response 200 (application/json)

## Group [/groups/{id}]
A distinct group entity.
+ Parameters
    + id (required, string, `1`) ... Alphanumeric `id` of the Group to perform the action on.
    
### Retrieve a Group [GET]
+ Response 200 (application/json)

### Create a Group [POST]
+ Response 201 (application/json)

### Update a Group [PUT]
+ Response 204

### Delete a Group [DELETE]
+ Response 204